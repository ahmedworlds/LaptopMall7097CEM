
============================================
File: C:\Projects.Study\LaptopMall\package.json
============================================
{
  "name": "shoppingmalllaptop",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@stripe/stripe-js": "^5.7.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^13.5.0",
    "bcrypt": "^5.1.1",
    "bootstrap": "^5.3.3",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.12.0",
    "pg": "^8.14.1",
    "react": "^19.0.0",
    "react-bootstrap": "^2.10.9",
    "react-dom": "^19.0.0",
    "react-google-charts": "^5.2.1",
    "react-router-dom": "^7.2.0",
    "react-scripts": "^5.0.1",
    "stripe": "^17.7.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "test:unit": "react-scripts test --testMatch \"**/src/_test_/**/*.test.js\" --watchAll=false",
    "test:api": "react-scripts test --testMatch \"**/src/_test_/**/*Api.test.js\" --watchAll=false",
    "lint": "eslint \"src/**/*.{js,jsx}\" \"server/**/*.js\"",
    "lint:fix": "eslint \"src/**/*.{js,jsx}\" \"server/**/*.js\" --fix"
  },
  "proxy": "http://localhost:5000",
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "eslint": "^8.57.1",
    "eslint-plugin-react": "^7.37.5",
    "globals": "^16.0.0",
    "typescript-eslint": "^8.30.1"
  }
}



============================================
File: C:\Projects.Study\LaptopMall\.env
============================================
NODE_ENV=production

FRONTEND_URL=http://localhost:3000
PORT=3000

JWORD=sk_test_ddTenST4kF9PAc6Old7PvQEm

DATABASE_URL=postgresql://laptop_mall_user:naSf5NZAJPGc8OL71vWzxLxcXz7RWlG6@dpg-cvujh4mmcj7s73cfhodg-a.oregon-postgres.render.com/laptop_mall
DATABASE_PORT=5432
DATABASE_Username=laptop_mall_user
DATABASE_Password=naSf5NZAJPGc8OL71vWzxLxcXz7RWlG6






============================================
File: C:\Projects.Study\LaptopMall\.githooks\commit-msg
============================================
#!/bin/sh

commit_msg=$(cat "$1")
pattern="^(feat|fix|docs|style|refactor|test|chore|html|css|api|pwa|ui|perf|test|ci):.+$"

if ! echo "$commit_msg" | grep -E "$pattern" > /dev/null; then
    echo "Error: Invalid commit message format."
    echo "Please use format: <type>: <description>"
    echo "Types:"
    echo "  feat: New feature"
    echo "  fix: Bug fix"
    echo "  html: HTML5 structure changes"
    echo "  css: Styling and responsive design"
    echo "  api: API endpoints and methods"
    echo "  pwa: Progressive Web App features"
    echo "  ui: User interface components"
    echo "  perf: Performance improvements"
    echo "  test: Adding/updating tests"
    echo "  ci: CI/CD pipeline changes"
    echo "  docs: Documentation"
    echo "  style: Code style/formatting"
    echo "  refactor: Code refactoring"
    echo "  chore: Maintenance tasks"
    exit 1
fi

exit 0


============================================
File: C:\Projects.Study\LaptopMall\.githooks\pre-commit
============================================
#!/bin/sh

# Run unit tests (excluding API tests that require server)
npm run test:unit || exit 1

# Check for sensitive information in staged files
if git diff --cached --name-only | grep -E "\.(js|jsx|json|yaml|yml)$" | xargs grep -l "API_KEY\|SECRET\|PASSWORD\|CREDENTIAL"; then
    echo "Warning: Possible sensitive information detected in staged files"
    exit 1
fi

exit 0


============================================
File: C:\Projects.Study\LaptopMall\.githooks\pre-push
============================================
#!/bin/sh

# Run all tests
npm test -- --watchAll=false || exit 1

exit 0


============================================
File: C:\Projects.Study\LaptopMall\.github\workflows\main.yml
============================================
name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    - name: Install Dependencies
      run: npm install
    - name: Run ESLint
      run: npm run lint

  test:
    needs: lint
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    - name: Install Dependencies
      run: npm install
    - name: Run Tests
      run: npm test -- --watchAll=false --testPathIgnorePatterns=UserApi.test.js TechNewsApi.test.js ProductApi.test.js

  deploy:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Check Deployment
      run: |
        $response = Invoke-WebRequest -Uri "https://laptopmall-frontend.onrender.com" -Method GET
        if ($response.StatusCode -eq 200) {
          Write-Host "Deployment successful!"
        } else {
          Write-Error "Deployment check failed!"
          exit 1
        }



============================================
File: C:\Projects.Study\LaptopMall\docs\api\openapi.yaml
============================================
{
  "openapi": "3.0.0",
  "info": {
    "title": "Laptop Mall API",
    "version": "1.0.0"
  },
  "paths": {},
  "components": {
    "schemas": {}
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\auth.yaml
============================================
{
  "/api/auth/login": {
    "post": {
      "tags": ["Authentication"],
      "summary": "User login",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoginRequest"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Login successful",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthResponse"
              }
            }
          }
        },
        "401": {
          "description": "Invalid credentials"
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\cart.yaml
============================================
{
  "/api/cart": {
    "get": {
      "tags": ["Cart"],
      "summary": "Get user's cart",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
          "description": "Cart contents",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cart"
              }
            }
          }
        }
      }
    },
    "post": {
      "tags": ["Cart"],
      "summary": "Add item to cart",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CartItem"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Item added successfully"
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\orders.yaml
============================================
{
  "/api/orders": {
    "get": {
      "tags": ["Orders"],
      "summary": "Get all orders",
      "responses": {
        "200": {
          "description": "List of orders",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "tags": ["Orders"],
      "summary": "Create new order",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Order created successfully"
        },
        "400": {
          "description": "Invalid input"
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\products.yaml
============================================
{
  "/api/products": {
    "get": {
      "tags": ["Products"],
      "summary": "Get all products",
      "description": "Retrieves a list of all available laptops",
      "responses": {
        "200": {
          "description": "Successful response",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "tags": ["Products"],
      "summary": "Add new product",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Product created successfully"
        },
        "400": {
          "description": "Invalid input"
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\reviews.yaml
============================================
{
  "/api/reviews": {
    "get": {
      "tags": ["Reviews"],
      "summary": "Get product reviews",
      "parameters": [
        {
          "name": "productId",
          "in": "query",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "List of reviews",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "tags": ["Reviews"],
      "summary": "Add product review",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReviewInput"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Review added successfully"
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\technews.yaml
============================================
{
  "/api/technews": {
    "get": {
      "tags": ["Tech News"],
      "summary": "Get latest tech news",
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "schema": {
            "type": "integer",
            "default": 1
          },
          "description": "Page number"
        },
        {
          "name": "limit",
          "in": "query",
          "schema": {
            "type": "integer",
            "default": 10
          },
          "description": "Items per page"
        }
      ],
      "responses": {
        "200": {
          "description": "List of tech news articles",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TechNewsResponse"
              }
            }
          }
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\users.yaml
============================================
{
  "/api/users/profile": {
    "get": {
      "tags": ["Users"],
      "summary": "Get user profile",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
          "description": "User profile data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\admin\product-management.yaml
============================================
{
  "/api/admin/productmanagement": {
    "get": {
      "tags": ["Admin - Products"],
      "summary": "Get all products for management",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
          "description": "List of all products",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminProduct"
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing token"
        }
      }
    },
    "post": {
      "tags": ["Admin - Products"],
      "summary": "Add new product",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AdminProductInput"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Product created successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "integer",
                    "example": 1
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\admin\sales-report.yaml
============================================
{
  "/api/admin/salesreport": {
    "get": {
      "tags": ["Admin - Sales"],
      "summary": "Get sales report data",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
          "description": "Sales report data",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaleRecord"
                }
              }
            }
          }
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\paths\admin\user-management.yaml
============================================
{
  "/api/admin/usermanagement": {
    "get": {
      "tags": ["Admin - Users"],
      "summary": "Get all users for management",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
          "description": "List of all users",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              }
            }
          }
        }
      }
    }
  },
  "/api/admin/usermanagement/{userId}/role": {
    "put": {
      "tags": ["Admin - Users"],
      "summary": "Update user role",
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "enum": ["user", "admin"]
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Role updated successfully"
        }
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\AdminProduct.yaml
============================================
{
  "AdminProduct": {
    "type": "object",
    "required": ["id", "name", "brand", "price"],
    "properties": {
      "id": {
        "type": "integer",
        "example": 1
      },
      "name": {
        "type": "string",
        "example": "MacBook Pro M1"
      },
      "brand": {
        "type": "string",
        "example": "Apple"
      },
      "price": {
        "type": "number",
        "example": 1299.99
      },
      "image": {
        "type": "string",
        "format": "uri",
        "example": "https://example.com/images/macbook.jpg"
      },
      "specifications": {
        "type": "string",
        "example": "8GB RAM, 256GB SSD"
      },
      "rating": {
        "type": "number",
        "minimum": 0,
        "maximum": 5,
        "example": 4.5
      }
    }
  },
  "AdminProductInput": {
    "type": "object",
    "required": ["name", "brand", "price"],
    "properties": {
      "name": {
        "type": "string"
      },
      "brand": {
        "type": "string"
      },
      "price": {
        "type": "number"
      },
      "image": {
        "type": "string"
      },
      "specifications": {
        "type": "string"
      },
      "rating": {
        "type": "number"
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\AdminUser.yaml
============================================
{
  "AdminUser": {
    "type": "object",
    "required": ["id", "name", "email", "role"],
    "properties": {
      "id": {
        "type": "integer",
        "example": 1
      },
      "name": {
        "type": "string",
        "example": "John Doe"
      },
      "email": {
        "type": "string",
        "format": "email",
        "example": "john@example.com"
      },
      "role": {
        "type": "string",
        "enum": ["user", "admin"],
        "example": "user"
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\Auth.yaml
============================================
{
  "LoginRequest": {
    "type": "object",
    "required": ["email", "password"],
    "properties": {
      "email": {
        "type": "string",
        "format": "email",
        "example": "user@example.com"
      },
      "password": {
        "type": "string",
        "format": "password",
        "example": "********"
      }
    }
  },
  "AuthResponse": {
    "type": "object",
    "properties": {
      "token": {
        "type": "string",
        "description": "JWT token",
        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      },
      "user": {
        "$ref": "#/components/schemas/User"
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\Cart.yaml
============================================
{
  "Cart": {
    "type": "object",
    "properties": {
      "items": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CartItem"
        }
      },
      "totalAmount": {
        "type": "number",
        "example": 2599.98
      }
    }
  },
  "CartItem": {
    "type": "object",
    "required": ["productId", "quantity"],
    "properties": {
      "productId": {
        "type": "integer",
        "example": 1
      },
      "quantity": {
        "type": "integer",
        "minimum": 1,
        "example": 2
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\Order.yaml
============================================
{
  "Order": {
    "type": "object",
    "required": ["id", "userId", "products", "totalAmount"],
    "properties": {
      "id": {
        "type": "integer",
        "description": "Unique order identifier",
        "example": 1
      },
      "userId": {
        "type": "integer",
        "description": "ID of the user who placed the order",
        "example": 1
      },
      "products": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "productId": {
              "type": "integer",
              "example": 1
            },
            "quantity": {
              "type": "integer",
              "example": 2
            }
          }
        }
      },
      "totalAmount": {
        "type": "number",
        "description": "Total order amount in GBP",
        "example": 2599.98
      },
      "orderDate": {
        "type": "string",
        "format": "date-time",
        "description": "Order creation timestamp",
        "example": "2023-11-15T14:30:00Z"
      },
      "status": {
        "type": "string",
        "enum": ["pending", "confirmed", "shipped", "delivered"],
        "description": "Current order status",
        "example": "confirmed"
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\Product.yaml
============================================
{
  "Product": {
    "type": "object",
    "required": ["id", "name", "price"],
    "properties": {
      "id": {
        "type": "integer",
        "description": "Unique identifier for the product",
        "example": 1
      },
      "name": {
        "type": "string",
        "description": "Name of the laptop",
        "example": "MacBook Pro M1"
      },
      "price": {
        "type": "number",
        "description": "Current price in GBP",
        "example": 1299.99
      },
      "brand": {
        "type": "string",
        "description": "Laptop manufacturer",
        "example": "Apple"
      },
      "specifications": {
        "type": "string",
        "description": "Technical specifications",
        "example": "8GB RAM, 256GB SSD"
      },
      "rating": {
        "type": "number",
        "description": "Customer rating",
        "minimum": 0,
        "maximum": 5,
        "example": 4.5
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\Review.yaml
============================================
{
  "Review": {
    "type": "object",
    "required": ["id", "userId", "productId", "rating", "comment"],
    "properties": {
      "id": {
        "type": "integer",
        "example": 1
      },
      "userId": {
        "type": "integer",
        "example": 1
      },
      "productId": {
        "type": "integer",
        "example": 1
      },
      "rating": {
        "type": "number",
        "minimum": 1,
        "maximum": 5,
        "example": 4.5
      },
      "comment": {
        "type": "string",
        "example": "Great laptop, excellent performance!"
      },
      "createdAt": {
        "type": "string",
        "format": "date-time",
        "example": "2023-11-15T10:30:00Z"
      }
    }
  },
  "ReviewInput": {
    "type": "object",
    "required": ["productId", "rating", "comment"],
    "properties": {
      "productId": {
        "type": "integer",
        "example": 1
      },
      "rating": {
        "type": "number",
        "minimum": 1,
        "maximum": 5,
        "example": 4.5
      },
      "comment": {
        "type": "string",
        "example": "Great laptop, excellent performance!"
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\SaleRecord.yaml
============================================
{
  "SaleRecord": {
    "type": "object",
    "required": ["id", "user_name", "total_amount", "created_at"],
    "properties": {
      "id": {
        "type": "integer",
        "example": 1
      },
      "user_name": {
        "type": "string",
        "example": "John Doe"
      },
      "total_amount": {
        "type": "number",
        "example": 1299.99
      },
      "created_at": {
        "type": "string",
        "format": "date-time",
        "example": "2023-11-15T14:30:00Z"
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\TechNews.yaml
============================================
{
  "TechNews": {
    "type": "object",
    "required": ["id", "title", "summary", "date"],
    "properties": {
      "id": {
        "type": "integer",
        "example": 1
      },
      "title": {
        "type": "string",
        "example": "Latest MacBook Pro Release"
      },
      "summary": {
        "type": "string",
        "example": "Apple announces new MacBook Pro with improved performance and battery life"
      },
      "content": {
        "type": "string"
      },
      "date": {
        "type": "string",
        "format": "date-time",
        "example": "2023-11-15T14:30:00Z"
      },
      "source": {
        "type": "string",
        "example": "TechReview"
      },
      "imageUrl": {
        "type": "string",
        "format": "uri",
        "example": "https://example.com/images/news/macbook.jpg"
      }
    }
  },
  "TechNewsResponse": {
    "type": "object",
    "properties": {
      "items": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TechNews"
        }
      },
      "total": {
        "type": "integer",
        "example": 50
      },
      "page": {
        "type": "integer",
        "example": 1
      },
      "limit": {
        "type": "integer",
        "example": 10
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\docs\api\schemas\User.yaml
============================================
{
  "User": {
    "type": "object",
    "required": ["id", "email", "name"],
    "properties": {
      "id": {
        "type": "integer",
        "description": "Unique identifier for the user",
        "example": 1
      },
      "email": {
        "type": "string",
        "format": "email",
        "description": "User's email address",
        "example": "user@example.com"
      },
      "name": {
        "type": "string",
        "description": "User's full name",
        "example": "John Doe"
      },
      "phone": {
        "type": "string",
        "description": "Contact number",
        "example": "+44 123 456 7890"
      },
      "address": {
        "type": "string",
        "description": "Delivery address",
        "example": "123 Main St, London"
      }
    }
  }
}


============================================
File: C:\Projects.Study\LaptopMall\public\index.html
============================================

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Laptop Mall - Your one-stop shop for the latest laptops, repairs, and accessories." />
    <meta name="keywords" content="laptops, computer store, laptop repairs, laptop accessories" />
    <title>Laptop Mall</title>

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root" role="main"></div>
  </body>
</html>


============================================
File: C:\Projects.Study\LaptopMall\public\manifest.json
============================================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}



============================================
File: C:\Projects.Study\LaptopMall\public\robots.txt
============================================
User-agent: *
Allow: /
Allow: /products/
Allow: /about/
Allow: /contact/
Allow: /services/
Allow: /technews/
Disallow: /admin/
Disallow: /dashboard/
Disallow: /checkout/
Disallow: /cart/

# Sitemaps
Sitemap: https://laptopmall.com/sitemap.xml

# Crawl-delay
Crawl-delay: 10



============================================
File: C:\Projects.Study\LaptopMall\public\service-worker.js
============================================
const CACHE_NAME = 'laptop-mall-v1';
const urlsToCache = [
  '/',
  '/index.html',
  '/static/css/main.css',
  '/static/js/main.js',
  '/manifest.json',
  '/favicon.ico',
  '/data/tech-qa.json',
  '/data/tech-news.json'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response;
        }
        return fetch(event.request)
          .then(response => {
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }
            const responseToCache = response.clone();
            caches.open(CACHE_NAME)
              .then(cache => {
                cache.put(event.request, responseToCache);
              });
            return response;
          });
      })
  );
});


============================================
File: C:\Projects.Study\LaptopMall\public\data\tech-news.json
============================================
{
  "news": [
    {
      "id": 1,
      "title": "Latest MacBook Pro Release",
      "summary": "Apple announces new MacBook Pro with enhanced performance and battery life",
      "date": "2025-03-15T10:00:00Z",
      "icon": "fa-laptop-code",
      "category": "innovation"
    },
    {
      "id": 2,
      "title": "Dell XPS Series Update",
      "summary": "Dell refreshes XPS lineup with new Intel processors and improved displays",
      "date": "2025-03-14T09:30:00Z",
      "icon": "fa-microchip",
      "category": "innovation"
    },
    {
      "id": 3,
      "title": "Gaming Laptop Trends 2025",
      "summary": "New gaming laptops focus on power efficiency without compromising performance",
      "date": "2025-03-13T14:00:00Z",
      "icon": "fa-gamepad",
      "category": "gaming"
    },
    {
      "id": 4,
      "title": "HP's Revolutionary Battery Tech",
      "summary": "HP introduces new battery technology promising 24-hour laptop usage on a single charge",
      "date": "2025-03-12T11:15:00Z",
      "icon": "fa-battery-full",
      "category": "innovation"
    },
    {
      "id": 5,
      "title": "Lenovo's AI Assistant Launch",
      "summary": "Lenovo unveils built-in AI assistant for ThinkPad series, revolutionizing user experience",
      "date": "2025-03-11T16:45:00Z",
      "icon": "fa-robot",
      "category": "ai"
    },
    {
      "id": 6,
      "title": "Sustainable Laptop Manufacturing",
      "summary": "Major manufacturers commit to eco-friendly laptop production using recycled materials",
      "date": "2025-03-10T13:20:00Z",
      "icon": "fa-leaf",
      "category": "sustainability"
    }
  ]
}


============================================
File: C:\Projects.Study\LaptopMall\public\data\tech-qa.json
============================================
{
  "qa": [
    {
      "question": "what is SSD",
      "answer": "SSD (Solid State Drive) is a fast storage device that has no moving parts, offering quicker data access than traditional hard drives."
    },
    {
      "question": "what is RAM",
      "answer": "RAM (Random Access Memory) is temporary memory that helps your laptop run programs smoothly. More RAM means better multitasking."
    },
    {
      "question": "best RAM for laptop",
      "answer": "16GB DDR4 or DDR5 RAM is currently optimal for most users. 32GB for heavy multitasking or content creation."
    },
    {
      "question": "how to choose laptop",
      "answer": "Consider: 1) Usage purpose 2) Processor (i5/i7/Ryzen) 3) RAM (16GB min) 4) Storage type (SSD preferred) 5) Battery life"
    },
    {
      "question": "what is processor",
      "answer": "A processor (CPU) is the brain of your laptop. It handles all computations. Common brands are Intel (i3/i5/i7/i9) and AMD (Ryzen)."
    },
    {
      "question": "gaming laptop requirements",
      "answer": "Gaming laptops need: 1) Dedicated GPU 2) i7/Ryzen 7 or better 3) 16GB+ RAM 4) SSD storage 5) Good cooling system"
    },
    {
      "question": "what is GPU",
      "answer": "GPU (Graphics Processing Unit) handles visual data. Essential for gaming and design work. Popular brands: NVIDIA RTX/GTX, AMD Radeon."
    },
    {
      "question": "laptop battery life",
      "answer": "Good battery life is 8+ hours. Gaming laptops: 3-6 hours. Ultrabooks can reach 12+ hours. Affected by screen brightness and usage."
    },
    {
      "question": "best laptop brands",
      "answer": "Top brands: Apple (MacBook), Dell (XPS), Lenovo (ThinkPad), HP (Spectre), ASUS (ROG for gaming). Each excels in different areas."
    },
    {
      "question": "student laptop recommendation",
      "answer": "For students: 1) i5/Ryzen 5 CPU 2) 16GB RAM 3) 512GB SSD 4) 8+ hour battery 5) Lightweight design. MacBook Air or Dell XPS are good options."
    },
    {
      "question": "difference HDD and SSD",
      "answer": "HDD uses spinning disks (slower, cheaper, more storage). SSD has no moving parts (faster, reliable, expensive but prices dropping)."
    },
    {
      "question": "laptop screen types",
      "answer": "Common types: 1) IPS (best colors) 2) OLED (perfect blacks) 3) TN (fast, poor viewing angles). Resolution: 1080p minimum, 4K for content creation."
    },
    {
      "question": "what is touchscreen laptop",
      "answer": "A laptop with a screen you can touch to interact. Good for artists and note-taking. Often comes with stylus support."
    },
    {
      "question": "laptop cooling tips",
      "answer": "Keep vents clear, use cooling pad, clean dust regularly, avoid soft surfaces like beds, update drivers for better power management."
    },
    {
      "question": "what is thunderbolt port",
      "answer": "High-speed port for data transfer, charging, and connecting displays. Thunderbolt 4 supports up to 40Gbps transfer speeds."
    },
    {
      "question": "business laptop features",
      "answer": "Look for: 1) Good build quality 2) Security features 3) Long battery 4) Professional design 5) Good warranty coverage"
    },
    {
      "question": "laptop wifi types",
      "answer": "WiFi 6 (802.11ax) is newest, fastest. WiFi 5 (802.11ac) still common. Better WiFi means faster internet and less interference."
    },
    {
      "question": "how often replace laptop",
      "answer": "Average lifespan 3-5 years. Gaming laptops might need upgrade sooner. Business laptops can last longer with good care."
    }
  ]
}


============================================
File: C:\Projects.Study\LaptopMall\public\script\GPSAddress.js
============================================
// retrieve GPS coord
function getGPSCoordinates() {
    return new Promise((resolve, reject) => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            resolve({ latitude, longitude });
          },
          (error) => {
            reject(`Error getting GPS location: ${error.message || error}`);
          }
        );
      } else {
        reject('Geolocation is not supported by this browser.');
      }
    });
  }
  
  // formatted address from OpenCage API
  async function getFormattedAddress(latitude, longitude) {
    const apiKey = '1aa8180ceaef4d26be004c84ac310d51'; // Replace with your actual API key
    const url = `https://api.opencagedata.com/geocode/v1/json?key=${apiKey}&q=${latitude}+${longitude}&pretty=1&no_annotations=1`;
  
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error('Failed to fetch location data');
      const data = await response.json();
      const formattedAddress = data.results[0]?.formatted || 'Address not found';
      return formattedAddress;
    } catch (error) {
      log('Error fetching address:', error);
      return 'Address not found';
    }
  }
  
  (async () => {
    try {
      // Get GPS coordinates
      const { latitude, longitude } = await getGPSCoordinates();
      log('Retrieved GPS Coordinates:', { latitude, longitude });
  
      // formatted address
      const formattedAddress = await getFormattedAddress(latitude, longitude);
      log('Formatted Address:', formattedAddress);
  
      // Display on the webpage
      document.body.innerHTML += `
        <div style="font-family: Arial, sans-serif; margin: 20px;">
          <h3>GPS Coordinates</h3>
          <p><strong>Latitude:</strong> ${latitude}</p>
          <p><strong>Longitude:</strong> ${longitude}</p>
          <h3>Formatted Address</h3>
          <p>${formattedAddress}</p>
        </div>
      `;
    } catch (error) {
      log(error);
      document.body.innerHTML += `
        <div style="font-family: Arial, sans-serif; margin: 20px; color: red;">
          <h3>Error</h3>
          <p>${error}</p>
        </div>
      `;
    }
  })();


============================================
File: C:\Projects.Study\LaptopMall\server\api.js
============================================

const { pool, isProduction } = require('./dal');

const express = require('express');
const cors = require('cors');
const stripe = require('stripe')('sk_test_ddTenST4kF9PAc6Old7PvQEm'); 
const { log, error } = require('../src/utils/logger');

// Make logger functions global
global.log = log;
global.error = error;

const { 
  getProducts, 
  getUserByEmail, 
  addUser,
  createOrder,
  getAllUsers,
  updateUserRole,
  getSalesReport,
  getProductsAdmin,
  addProduct
} = require('./dal');

// const pool = require('./dal').pool;
const bcrypt = require('bcrypt'); 
const jwt = require('jsonwebtoken');
require('dotenv').config(); 
const path = require('path');
const fs = require('fs');


const app = express();

// Enable CORS 
app.use(cors());

app.use(express.json());

// Secret key for signing JWT 
const JWORD = process.env.JWORD || 'sk_test_ddTenST4kF9PAc6Old7PvQEm';


// System health check endpoint
app.get('/api/system/status', (req, res) => {
  res.json({ status: 'System Online', timestamp: new Date().toISOString() });
});


// Login endpoint
app.post('/api/login', async (req, res) => {

  try {
  const { email, password } = req.body;
    const user = await getUserByEmail(email);

    if (user && bcrypt.compareSync(password, user.password)) {

      // Generate JWT token
      const token = jwt.sign({ userId: user.id, name: user.name, email: user.email }, JWORD, { expiresIn: '1h' });

      // return user data and token on successful login
      res.json({
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        token,
      });
    } else {
      res.status(401).json({ error: 'Invalid email or password' });
    }
  } catch {
    res.status(500).json({ error: 'Login failed' });
  }
});


app.post('/api/register', async (req, res) => {
  const { name, email, password } = req.body;

  try {
    const existingUser = await getUserByEmail(email);
    if (existingUser) {
      return res.status(400).json({ error: 'User already exists' });
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Add new user to the database
    const userId = await addUser(name, email, hashedPassword);

    res.status(201).json({ message: 'Registration successful', userId });
  } catch {
    res.status(500).json({ error: 'Registration failed' });
  }
});



// products data from the database
app.get('/api/products', async (req, res) => {
  try {
    const products = await getProducts();
    res.json(products);
  } catch {
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

app.post('/create-checkout-session', async (req, res) => {
  const { cart, userId } = req.body; // Get cart data, userId

  try {
    // items to send to Stripe
    const items = cart.map(item => ({
      price_data: {
        currency: 'gbp',  
        product_data: {
          name: item.name,
        },
        unit_amount: item.price * 100, 
      },
      quantity: item.quantity,
    }));

    // total amount
    const totalAmount = cart.reduce((total, item) => total + item.price * item.quantity, 0);
    
    // Stripe checkout session
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: items,
      mode: 'payment',
      success_url: `${process.env.FRONTEND_URL}/success?session_id={CHECKOUT_SESSION_ID}`, 
      cancel_url: `${process.env.FRONTEND_URL}/cancel`,
      metadata: {
        userId: userId, 
        cart: JSON.stringify(cart), 
        totalAmount: totalAmount, 
      },
    });

    // session id to frontend
    res.json({ id: session.id });
  } catch {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


// Create new sales order
app.post('/api/create-order', async (req, res) => {
  const { userId, cart, totalAmount, latitude, longitude } = req.body;
  try {
    const orderId = await createOrder(userId, totalAmount, cart, latitude, longitude);
    res.status(201).json({ message: 'Order created successfully', orderId });
  } catch {
    res.status(500).json({ error: 'Failed to create order' });
  }
});

// Update create-order endpoint
app.post('/api/create-order', async (req, res) => {
  const { userId, cart, totalAmount, latitude, longitude } = req.body;
  try {
    const orderId = await createOrder(userId, totalAmount, cart, latitude, longitude);
    res.status(201).json({ message: 'Order created successfully', orderId });
  } catch {
    res.status(500).json({ error: 'Failed to create order' });
  }
});

// Update user management endpoint
app.get('/api/admin/usermanagement', async (req, res) => {
  try {
    const users = await getAllUsers();
    res.json(users);
  } catch {
    res.status(500).json({ error: 'Failed to fetch users' });
  }
});

// Update role management endpoint
app.put('/api/admin/usermanagement/:id/role', async (req, res) => {
  const { id } = req.params;
  const { role } = req.body;
  try {
    const affected = await updateUserRole(id, role);
    if (affected === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json({ message: 'User role updated successfully' });
  } catch {
    res.status(500).json({ error: 'Failed to update user role' });
  }
});

// Update sales report endpoint
app.get('/api/admin/salesreport', async (req, res) => {
  try {
    const sales = await getSalesReport();
    res.json(sales);
  } catch  {
    res.status(500).json({ error: error.message || 'Failed to fetch sales data' });
  }
});




app.get('/verify-payment-session', async (req, res) => {
  const { session_id } = req.query;

  try {
    //session from Stripe
    const session = await stripe.checkout.sessions.retrieve(session_id);

    if (session.payment_status === 'paid') {
      const { userId, cart, totalAmount } = session.metadata;

      if (!userId) {
        return res.status(400).json({ error: 'User ID is missing in session metadata' });
      }

      // Save order in database
      // const result = await new Promise((resolve, reject) => {
      //   pool.query(
      //     'INSERT INTO sales_orders (user_id, total_amount, order_details) VALUES (?, ?, ?)',
      //     [userId, totalAmount, cart],
      //     (error, results) => {
      //       if (error) return reject(error);
      //       resolve(results);
      //     }
      //   );
      // });

      //Return success
      res.json({
        status: 'success',
        orderId: session_id, 
        // orderId: result.insertId,
        totalAmount: parseFloat(totalAmount),
        cart: JSON.parse(cart),
      });
    } else {
      res.json({ status: 'failed' });
    }
  } catch {
    res.status(500).json({ error: 'Failed to verify payment' });
  }
});



// logo as Base64
app.get('/api/logo', (req, res) => {
  const logoPath = path.join(__dirname, '../public/images/logo.png'); 

  //Read file
  fs.readFile(logoPath, (err, data) => {
    if (err) {
      return res.status(500).json({ error: 'Failed to load logo' });
    }

    // file buffer to Base64
    const base64Image = data.toString('base64');
    res.json({ logo: `data:image/png;base64,${base64Image}` });
  });
});




// Admin
// Get all users
app.get('/api/admin/usermanagement', async (req, res) => {
  try {
    const connection = await pool.promise();
    const [users] = await connection.query('SELECT id, name, email, role FROM users');
    res.json(users);
  } catch {
    res.status(500).json({ error: 'Failed to fetch users' });
  }
});

// Update user role
app.put('/api/admin/usermanagement/:id/role', async (req, res) => {
  const { id } = req.params;
  const { role } = req.body;
  
  try {
    const connection = await pool.promise();
    const [result] = await connection.query(
      'UPDATE users SET role = ? WHERE id = ?',
      [role, id]
    );
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json({ message: 'User role updated successfully' });
  } catch {
    res.status(500).json({ error: 'Failed to update user role' });
  }
});

app.get('/api/admin/salesreport', async (req, res) => {
  try {
    const connection = await pool.promise();
    const [sales] = await connection.query(`
      SELECT 
        so.id,
        so.user_id,
        u.name as user_name,
        so.total_amount,
        so.order_details,
        so.latitude,
        so.longitude,
        so.created_at
      FROM sales_orders so
      LEFT JOIN users u ON so.user_id = u.id
      ORDER BY so.created_at DESC
    `);
    res.json(sales);
  } catch (error) {
    res.status(500).json({ error: error.message || 'Failed to fetch sales data' });
  }
});

// Update the product management endpoints
app.get('/api/admin/productmanagement', async (req, res) => {
  try {
    const products = await getProductsAdmin();
    res.json(products);
  } catch {
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

app.post('/api/admin/productmanagement', async (req, res) => {
  const { name, brand, price, image, specifications, rating } = req.body;
  try {
    const productId = await addProduct(name, brand, price, image, specifications, rating);
    res.status(201).json({
      message: 'Product added successfully',
      productId
    });
  } catch {
    res.status(500).json({ error: 'Failed to add product' });
  }
});


app.get('/api/technews', (req, res) => {
  const filePath = path.join(__dirname, '../public/data/tech-news.json');
  
  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      return res.status(500).json({ error: 'Failed to load tech news' });
    }
    
    try {
      const newsData = JSON.parse(data);
      res.json(newsData.news);
    } catch {
      res.status(500).json({ error: 'Failed to parse tech news data' });
    }
  });
});




// Start the server
const PORT = isProduction ? (process.env.PORT || 3000) : 5000;
app.listen(PORT, () => {
  log(`Server running on port ${PORT}`);
});



============================================
File: C:\Projects.Study\LaptopMall\server\dal.js
============================================

const mysql = require('mysql2/promise');
const { Pool: PgPool } = require('pg');

// Detect environment based on DATABASE_URL presence
const isProduction = process.env.DATABASE_URL ? true : false;

// Create connection based on environment detection
const pool = isProduction
  ? new PgPool({
      connectionString: process.env.DATABASE_URL,
      ssl: {
        rejectUnauthorized: false
      }
    })
  : mysql.createPool({
      host: 'localhost',
      user: 'root',
      password: '',
      database: 'laptop_mall',
      waitForConnections: true,
      connectionLimit: 10,
      queueLimit: 0
    });

// Helper function to handle different DB responses
const formatResults = (results) => {
  if (isProduction) {
    return results.rows;
  }
  return results[0];
};

// all products
async function getProducts() {
  const results = await pool.query('SELECT * FROM products');
  return formatResults(results);
}

// find a user by email
async function getUserByEmail(email) {
  const results = await pool.query(
    'SELECT * FROM users WHERE email = ?',
    [email]
  );
  const formattedResults = formatResults(results);
  return formattedResults[0];
}

// add a new user
async function addUser(name, email, password) {
  if (process.env.NODE_ENV === 'production') {
    const results = await pool.query(
      'INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING id',
      [name, email, password]
    );
    return results.rows[0].id;
  } else {
    const results = await pool.query(
      'INSERT INTO users (name, email, password) VALUES (?, ?, ?)',
      [name, email, password]
    );
    return results[0].insertId;
  }
}

async function createOrder(userId, totalAmount, cart, latitude, longitude) {
  const query = isProduction
    ? 'INSERT INTO sales_orders (user_id, total_amount, order_details, latitude, longitude) VALUES ($1, $2, $3, $4, $5) RETURNING id'
    : 'INSERT INTO sales_orders (user_id, total_amount, order_details, latitude, longitude) VALUES (?, ?, ?, ?, ?)';
  
  const values = [userId, totalAmount, JSON.stringify(cart), latitude, longitude];
  const result = await pool.query(query, values);
  return isProduction ? result.rows[0].id : result[0].insertId;
}

async function getAllUsers() {
  const query = 'SELECT id, name, email, role FROM users';
  const result = await pool.query(query);
  return formatResults(result);
}

async function updateUserRole(id, role) {
  const query = isProduction
    ? 'UPDATE users SET role = $1 WHERE id = $2'
    : 'UPDATE users SET role = ? WHERE id = ?';
  
  const result = await pool.query(query, [role, id]);
  return isProduction ? result.rowCount : result[0].affectedRows;
}

async function getSalesReport() {
  const query = `
    SELECT 
      so.id,
      so.user_id,
      u.name as user_name,
      so.total_amount,
      so.order_details,
      so.latitude,
      so.longitude,
      so.created_at
    FROM sales_orders so
    LEFT JOIN users u ON so.user_id = u.id
    ORDER BY so.created_at DESC
  `;
  const result = await pool.query(query);
  return formatResults(result);
}

// Add this function to dal.js
async function getProductsAdmin() {
  const query = 'SELECT * FROM products ORDER BY id';
  const result = await pool.query(query);
  return formatResults(result);
}

async function addProduct(name, brand, price, image, specifications, rating) {
  const query = isProduction
    ? 'INSERT INTO products (name, brand, price, image, specifications, rating) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id'
    : 'INSERT INTO products (name, brand, price, image, specifications, rating) VALUES (?, ?, ?, ?, ?, ?)';
  
  const values = [name, brand, price, image, specifications, rating];
  const result = await pool.query(query, values);
  return isProduction ? result.rows[0].id : result[0].insertId;
}

module.exports = {
  pool,
  isProduction,
  getProducts,
  getUserByEmail,
  addUser,
  createOrder,
  getAllUsers,
  updateUserRole,
  getSalesReport,
  getProductsAdmin,
  addProduct
};


============================================
File: C:\Projects.Study\LaptopMall\src\App.css
============================================

/* Sliding cart panel */
.cart-panel {
  position: fixed;
  top: 0;
  right: 0;
  width: 350px;
  height: 100%;
  background-color: #fff;
  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  padding: 20px;
  overflow-y: auto;
}

/* Cart open button */
.cart-toggle {
  position: fixed;
  top: 20px;
  right: 20px;
  background-color: #333;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
}

/* Red close button */
.close-cart {
  margin-top: 20px;
  background-color: #ff4d4d;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
}


============================================
File: C:\Projects.Study\LaptopMall\src\App.js
============================================

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Header from './components/Header';
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import Home from './pages/Home';
import About from './pages/About';
import Services from './pages/Services';
import Contact from './pages/Contact';
import Blog from './pages/Blog';
import Products from './pages/Product';
import Dashboard from './private/Dashboard';
import Cart from './pages/Cart';
import Checkout from './pages/Checkout';
import Success from './pages/Success';
import Cancel from './pages/Cancel';
import './App.css';
import AdminDashboard from './admin/AdminDashboard';
import TechNews from './pages/TechNews';

// Create Cart
export const CartContext = React.createContext();

const App = () => {
  // Initialize state from localStorage
  const [user, setUser] = useState(() => {
    const savedUser = localStorage.getItem('user');
    return savedUser ? JSON.parse(savedUser) : null;
  });
  
  const [cart, setCart] = useState(() => {
    const savedCart = localStorage.getItem('cart');
    return savedCart ? JSON.parse(savedCart) : [];
  });
  
  const [isCartOpen, setIsCartOpen] = useState(false);

  // Update localStorage when cart changes
  useEffect(() => {
    localStorage.setItem('cart', JSON.stringify(cart));
  }, [cart]);

  // Update localStorage when user changes
  useEffect(() => {
    if (user) {
      localStorage.setItem('user', JSON.stringify(user));
    } else {
      localStorage.removeItem('user');
    }
  }, [user]);

  // Add item to cart
  const addToCart = (product) => {
    const existingItem = cart.find((item) => item.id === product.id);
    if (existingItem) {
      setCart(
        cart.map((item) =>
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        )
      );
    } else {
      setCart([...cart, { ...product, quantity: 1 }]);
    }
  };

  // Remove item from cart
  const removeFromCart = (productId) => {
    setCart(cart.filter((item) => item.id !== productId));
  };

  //  cart panel
  const toggleCartPanel = () => {
    setIsCartOpen(!isCartOpen);
  };

  return (
    <Router>
      <CartContext.Provider value={{ cart, addToCart, removeFromCart }}>
        <Header user={user} setUser={setUser} toggleCartPanel={toggleCartPanel} cart={cart} />
        <Navbar user={user} setUser={setUser} />
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/about" element={<About />} />
          <Route path="/services" element={<Services />} />
          <Route path="/contact" element={<Contact />} />
          <Route path="/blog" element={<Blog />} />
          <Route path="/products" element={<Products />} />
          <Route path="/cart" element={<Cart toggleCartPanel={toggleCartPanel} />} />
          <Route path="/checkout" element={<Checkout />} />
          <Route path="/success" element={<Success />} />
          <Route path="/cancel" element={<Cancel />} />
          <Route path="/dashboard" element={<Dashboard user={user} />} />
          <Route path="/admin/*" element={<AdminDashboard />} />
          <Route path="/technews" element={<TechNews />} />

        </Routes>
        <Footer />

        {isCartOpen && (
          <div className="cart-panel">
            <button onClick={toggleCartPanel} className="close-cart">
              Close Cart
            </button>

            <Cart toggleCartPanel={toggleCartPanel} />
          </div>
        )}
      </CartContext.Provider>
    </Router>
  );
};

export default App;


============================================
File: C:\Projects.Study\LaptopMall\src\config.js
============================================
const isProduction = process.env.NODE_ENV === 'production';

export const API_BASE_URL = isProduction
  ? 'https://laptopmall-backend.onrender.com'
  : 'http://localhost:5000';

export const FRONTEND_URL = isProduction
  ? 'https://laptopmall-frontend.onrender.com'
  : 'http://localhost:3000';


============================================
File: C:\Projects.Study\LaptopMall\src\index.css
============================================
/* Main page style */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Code font style */
code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}



============================================
File: C:\Projects.Study\LaptopMall\src\index.js
============================================
import './styles/utils.css';
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import { log, error } from './utils/logger';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/service-worker.js')
      .then(registration => {
        log('SW registered:', registration);
      })
      .catch(error => {
        log('SW registration failed:', error);
      });
  });
}

// Make logger functions globally available
window.log = log;
window.error = error;


============================================
File: C:\Projects.Study\LaptopMall\src\admin\AdminDashboard.js
============================================

import React from 'react';
import { Routes, Route, Link, Navigate} from 'react-router-dom';
// import { Routes, Route, Link, Navigate, useLocation } from 'react-router-dom';
import UserManagement from './UserManagement';
import ProductManagement from './ProductManagement';
import SalesReport from './SalesReport';

// dashbord for admin 
const AdminDashboard = () => {
  // const location = useLocation();
  const user = JSON.parse(localStorage.getItem('user'));

  //  admin access check
  if (!user || user.role !== 'admin') {
    return <Navigate to="/" replace />;
  }

  return (
    <div className="admin-dashboard">

      <nav className="bg-dark mb-4">
        <ul className="nav nav-pills justify-content-center gap-3">
          <li className="nav-item">
            <Link to="/admin/usermanagement" className="nav-link text-light">Users</Link>
          </li>
          <li className="nav-item">
            <Link to="/admin/productmanagement" className="nav-link text-light">Products</Link>
          </li>
          <li className="nav-item">
            <Link to="/admin/salesreport" className="nav-link text-light">Sales</Link>
          </li>
        </ul>
      </nav>

      <div className="admin-content">
        <Routes>
          <Route index element={<Navigate to="usermanagement" replace />} />
          <Route path="usermanagement" element={<UserManagement />} />
          <Route path="productmanagement" element={<ProductManagement />} />
          <Route path="salesreport" element={<SalesReport />} />
        </Routes>
      </div>
    </div>
  );
};

export default AdminDashboard;


============================================
File: C:\Projects.Study\LaptopMall\src\admin\ProductManagement.js
============================================

import React, { useState, useEffect } from 'react';
import { getLaptopDetails } from '../services/aiHelper';
import { log } from '../utils/logger';

const ProductManagement = () => {
  const [products, setProducts] = useState([]);
  const [newProduct, setNewProduct] = useState({
    name: '',
    brand: '',
    price: '',
    image: '',
    specifications: '',
    rating: ''
  });

  // products
  useEffect(() => {
    fetch('/api/admin/productmanagement')
      .then(res => res.json())
      .then(data => {
        // Ensure data is an array
        const productsArray = Array.isArray(data) ? data : [];
        setProducts(productsArray);
      })
      .catch(() => {
        setProducts([]); // Set empty array on error
      });
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    fetch('/api/admin/productmanagement', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(newProduct)
    })
    .then(res => res.json())
    .then(data => {
      setProducts([...products, { ...newProduct, id: data.productId }]);
      // Reset form
      setNewProduct({
        name: '',
        brand: '',
        price: '',
        image: '',
        specifications: '',
        rating: ''
      });
    })
    .catch(() => {});
  };

  const handleAIWizard = async () => {
    if (!newProduct.name) {
      alert('Please enter a product name first');
      return;
    }

    try {
      const details = await getLaptopDetails(newProduct.name);
      
      if (details) {
        setNewProduct({
          ...newProduct,
          ...details
        });
        log('Updated product details:', details);
      } else {
        log('No details returned from AI service');
      }
    } catch (error) {
      log('AI Wizard Error:', error);
      alert('Failed to get product details from AI service');
    }
  };

  return (
    <div className="container py-4">
      <h3 className="mb-4">Product Management</h3>
      
      {/* Product List */}
      <div className="card mb-5">
        <div className="card-header bg-dark text-white">
          <h4 className="mb-0">Current Products</h4>
        </div>
        <div className="card-body table-responsive">
          <table className="table table-hover align-middle">
            <thead className="table-dark">
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Brand</th>
                <th>Price</th>
                <th>Image</th>
                <th>Specifications</th>
                <th>Rating</th>
              </tr>
            </thead>
            <tbody>
              {Array.isArray(products) && products.map(product => (
                <tr key={product.id}>
                  <td>{product.id}</td>
                  <td>{product.name}</td>
                  <td>{product.brand}</td>
                  <td>£{product.price}</td>
                  <td><img src={product.image} alt={product.name} className="img-thumbnail" style={{width: '80px'}} /></td>
                  <td className="text-truncate" style={{maxWidth: '200px'}}>{product.specifications}</td>
                  <td><span className="badge bg-success">{product.rating}</span></td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Add Product Form */}
      <div className="card">
        <div className="card-header bg-dark text-white">
          <h4 className="mb-0">Add New Product</h4>
        </div>
        <div className="card-body">
          <form onSubmit={handleSubmit} className="row g-3">
            <div className="col-md-6">
              <label className="form-label">Name:</label>
              <div className="input-group">
                <input
                  type="text"
                  className="form-control"
                  value={newProduct.name}
                  onChange={e => setNewProduct({...newProduct, name: e.target.value})}
                  required
                />
                <button 
                  type="button" 
                  onClick={handleAIWizard}
                  className="btn btn-dark"
                >
                  AI Wizard 🪄
                </button>
              </div>
            </div>
            <div className="col-md-6">
              <label className="form-label">Brand:</label>
              <input
                type="text"
                className="form-control"
                value={newProduct.brand}
                onChange={e => setNewProduct({...newProduct, brand: e.target.value})}
                required
              />
            </div>
            <div className="col-md-6">
              <label className="form-label">Price:</label>
              <input
                type="number"
                className="form-control"
                step="0.01"
                value={newProduct.price}
                onChange={e => setNewProduct({...newProduct, price: e.target.value})}
                required
              />
            </div>
            <div className="col-md-6">
              <label className="form-label">Image URL:</label>
              <input
                type="text"
                className="form-control"
                value={newProduct.image}
                onChange={e => setNewProduct({...newProduct, image: e.target.value})}
                required
              />
            </div>
            <div className="col-12">
              <label className="form-label">Specifications:</label>
              <textarea
                className="form-control"
                rows="3"
                value={newProduct.specifications}
                onChange={e => setNewProduct({...newProduct, specifications: e.target.value})}
                required
              />
            </div>
            <div className="col-md-6">
              <label className="form-label">Rating:</label>
              <input
                type="number"
                className="form-control"
                step="0.1"
                min="0"
                max="5"
                value={newProduct.rating}
                onChange={e => setNewProduct({...newProduct, rating: e.target.value})}
                required
              />
            </div>
            <div className="col-12">
              <button type="submit" className="btn btn-dark">Add Product</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ProductManagement;


============================================
File: C:\Projects.Study\LaptopMall\src\admin\SalesReport.js
============================================

import React, { useState, useEffect } from 'react';
import { Chart } from "react-google-charts";
import { log } from '../utils/logger';

// shows all the money made by users
const SalesReport = () => {
  const [sales, setSales] = useState([]);
  const [error, setError] = useState(null);
  const [chartData, setChartData] = useState({
    customerSales: [],
    timelineSales: []
  });

  useEffect(() => {
    log('Fetching sales data...');
    fetch('/api/admin/salesreport', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    })
      .then(res => {
        log('Response status:', res.status);
        if (!res.ok) {
          return res.json().then(err => {
            throw new Error(err.error || 'Failed to fetch sales data');
          });
        }
        return res.json();
      })
      .then(data => {
        log('Sales data:', data);
        setSales(data);
      })
      .catch(err => {
        log('Detailed error:', err);
        setError(err.message);
      });
  }, []);

  useEffect(() => {
    if (sales.length > 0) {
      // group and sum sales by customer
      const customerSalesMap = sales.reduce((acc, sale) => {
        const customer = sale.user_name;
        acc[customer] = (acc[customer] || 0) + Number(sale.total_amount);
        return acc;
      }, {});

      // Convert to chart format
      const customerData = [["Customer", "Sales"]];
      Object.entries(customerSalesMap).forEach(([customer, total]) => {
        customerData.push([customer, total]);
      });

      // prepare data for timeline chart
      const timelineData = [["Date", "Amount"]];
      sales.forEach(sale => {
        timelineData.push([new Date(sale.created_at), Number(sale.total_amount)]);
      });

      setChartData({
        customerSales: customerData,
        timelineSales: timelineData
      });
    }
  }, [sales]);

  return (
    <div className="container py-4">
      {/* Charts Section First */}
      <div className="row mb-4">
        <div className="col-md-6 mb-4">
          <div className="card">
            <div className="card-header bg-dark text-white">
              <h4 className="mb-0">Sales by Customer</h4>
            </div>
            <div className="card-body">
              {chartData.customerSales.length > 0 && (
                <Chart
                  chartType="PieChart"
                  data={chartData.customerSales}
                  options={{
                    title: "Sales Distribution",
                    is3D: true,
                    backgroundColor: 'transparent'
                  }}
                  width="100%"
                  height="400px"
                />
              )}
            </div>
          </div>
        </div>

        <div className="col-md-6 mb-4">
          <div className="card">
            <div className="card-header bg-dark text-white">
              <h4 className="mb-0">Sales Timeline</h4>
            </div>
            <div className="card-body">
              {chartData.timelineSales.length > 0 && (
                <Chart
                  chartType="LineChart"
                  data={chartData.timelineSales}
                  options={{
                    title: "Sales Over Time",
                    curveType: "function",
                    legend: { position: "bottom" },
                    backgroundColor: 'transparent'
                  }}
                  width="100%"
                  height="400px"
                />
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Table Section After */}
      <div className="card">
        <div className="card-header bg-dark text-white d-flex justify-content-between align-items-center">
          <h3 className="mb-0">Sales Report</h3>
          <span className="badge bg-light text-dark">Total Records: {sales.length}</span>
        </div>
        
        <div className="card-body table-responsive">
          <table className="table table-hover align-middle">
            <thead className="table-dark">
              <tr>
                <th>Order ID</th>
                <th>Customer</th>
                <th>Amount</th>
                <th>Date</th>
              </tr>
            </thead>
            <tbody>
              {sales.map(sale => (
                <tr key={sale.id}>
                  <td>{sale.id}</td>
                  <td>{sale.user_name}</td>
                  <td>
                    <span className="badge bg-success">
                      £{Number(sale.total_amount).toFixed(2)}
                    </span>
                  </td>
                  <td>{new Date(sale.created_at).toLocaleDateString()}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {error && (
        <div className="alert alert-danger mt-4" role="alert">
          Error loading sales: {error}
        </div>
      )}
    </div>
  );
};

export default SalesReport;


============================================
File: C:\Projects.Study\LaptopMall\src\admin\UserManagement.js
============================================

import React, { useState, useEffect } from 'react';
import { log } from '../utils/logger';

// manage all the userss
const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch('/api/admin/usermanagement', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      }
    })
      .then(res => res.json())
      .then(data => {
        setUsers(data);
      })
      .catch(() => {
        setError('Failed to load users');
      });
  }, []);

  const handleRoleChange = (userId, newRole) => {
    fetch(`/api/admin/usermanagement/${userId}/role`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify({ role: newRole })
    })
      .then(res => res.json())
      .then(data => {
        log('Role updated:', data);
        //update the users list with the new role
        setUsers(users.map(user => 
          user.id === userId ? { ...user, role: newRole } : user
        ));
      })
      .catch(err => {
        log('Error updating role:', err);
        setError('Failed to update role');
      });
  };

  if (error) {
    return <div className="error">{error}</div>;
  }

  return (
    <div className="container py-4">
      <h3 className="mb-4">User Management</h3>
      <div className="table-responsive">
        <table className="table table-hover">
          <thead className="table-dark">
            <tr>
              <th>ID</th>
              <th>Name</th>
              <th>Email</th>
              <th>Role</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {users.map(user => (
              <tr key={user.id}>
                <td>{user.id}</td>
                <td>{user.name}</td>
                <td>{user.email}</td>
                <td>
                  <span className={`badge ${user.role === 'admin' ? 'bg-danger' : 'bg-primary'}`}>
                    {user.role}
                  </span>
                </td>
                <td>
                  <select
                    className="form-select form-select-sm w-auto"
                    value={user.role}
                    onChange={(e) => handleRoleChange(user.id, e.target.value)}
                  >
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                  </select>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {error && (
        <div className="alert alert-danger mt-3" role="alert">
          {error}
        </div>
      )}
    </div>
  );
};

export default UserManagement;


============================================
File: C:\Projects.Study\LaptopMall\src\components\AuthModal.js
============================================

import React, { useState } from 'react';
import { Modal, Form, Button } from 'react-bootstrap';


// login/signup popup window
/**
 * AuthModal Component
 * @param {Object} props
 * @param {Function} props.setUser - Function to update user state
 */
const AuthModal = ({ setUser }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  // Reset error message
  const handleCloseModal = () => {
    setShowModal(false);
    setErrorMessage('');
  };

  // Login
  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

    const data = await response.json();
      if (response.ok) {

        //const responseData = await response.json();
    
        const { token, ...userData } = data;
        if (token && userData.name && userData.email) {
          localStorage.setItem('token', token);
          //setUser(userData);

      setUser({
        email: userData.email,
        name: userData.name,
        role: userData.role,
      });

        setShowModal(false);
        } else {
          //setErrorMessage(data.message);
          setErrorMessage('Unexpected response from server.');
        }

      } else {
        //const responseData = await response.json();
        setErrorMessage(data.error || 'An error occurred. Please try again.');
        //alert(responseData.error || 'An error occurred. Please try again.');
      }
    } catch {
      setErrorMessage('An unexpected error occurred. Please try again.');
    }
  };

  // Registration
  const handleRegister = async (e) => {
    e.preventDefault();
    setErrorMessage('');

    if (password !== confirmPassword) {
      setErrorMessage('Passwords do not match.');
      return;
    }

    try {
      const response = await fetch('/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, email, password }),
      });

      if (response.ok) {
        alert('Registration successful! Please log in.');
        setIsRegistering(false);
        handleCloseModal(); 
      } else {
        const responseData = await response.json();
        setErrorMessage(responseData.error || 'Registration failed. Please try again.');
      }
    } catch {
      setErrorMessage('An error occurred during registration. Please try again.');
    }
  };

  return (
    <>
      <Button variant="primary" onClick={() => setShowModal(true)}>
        {isRegistering ? 'Register' : 'Login'}
      </Button>

      <Modal show={showModal} onHide={handleCloseModal} centered>
        <Modal.Header closeButton>
          <Modal.Title>{isRegistering ? 'Register' : 'Login'}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {errorMessage && <div className="alert alert-danger">{errorMessage}</div>}
          <Form onSubmit={isRegistering ? handleRegister : handleLogin}>
            {isRegistering && (
              <Form.Group className="mb-3">
                <Form.Label>Name</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="Name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  required
                />
              </Form.Group>
            )}
            <Form.Group className="mb-3">
              <Form.Label>Email</Form.Label>
              <Form.Control
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </Form.Group>
            {isRegistering && (
              <Form.Group className="mb-3">
                <Form.Label>Confirm Password</Form.Label>
                <Form.Control
                  type="password"
                  placeholder="Confirm Password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required
                />
              </Form.Group>
            )}
            <Button variant="primary" type="submit">
              {isRegistering ? 'Register' : 'Login'}
            </Button>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseModal}>
            Close
          </Button>
          <Button variant="link" onClick={() => setIsRegistering(!isRegistering)}>
            {isRegistering ? 'Already have an account? Login' : 'Need an account? Register'}
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};



export default AuthModal;



============================================
File: C:\Projects.Study\LaptopMall\src\components\Footer.css
============================================

/* Dark bottom bar */
footer {
  background-color: #333; 
  color: white; 
  padding: 20px 0; 
}

/* Social media links */
.social-icons {
  font-size: 1.5rem; 
}

/* Link decoration */
.social-icons a {
  text-decoration: none; 
  transition: color 0.3s ease; 
}

/* Hover highlight */
.social-icons a:hover {
  color: #ffcc00; 
}


============================================
File: C:\Projects.Study\LaptopMall\src\components\Footer.js
============================================
import React from 'react';
import './Footer.css';

const Footer = () => {
  return (
    <footer className="text-center py-4 bg-dark text-white">

      <p className="mb-3">&copy; 2025 Laptop Mall. All rights reserved.</p>

      {/* Social Media Icons */}
      <div className="social-icons">
        <a
          href="https://facebook.com"
          target="_blank"
          rel="noopener noreferrer"
          className="text-white me-3"
        >
          <i className="bi bi-facebook"></i>
        </a>
        <a
          href="https://twitter.com"
          target="_blank"
          rel="noopener noreferrer"
          className="text-white me-3"
        >
          <i className="bi bi-twitter"></i>
        </a>
        <a
          href="https://instagram.com"
          target="_blank"
          rel="noopener noreferrer"
          className="text-white me-3"
        >
          <i className="bi bi-instagram"></i>
        </a>
        <a
          href="https://linkedin.com"
          target="_blank"
          rel="noopener noreferrer"
          className="text-white"
        >
          <i className="bi bi-linkedin"></i>
        </a>
      </div>
    </footer>
  );
};

export default Footer;


============================================
File: C:\Projects.Study\LaptopMall\src\components\Header.css
============================================


/* Dark top bar */
header {
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); 
  background-color: #333;
  color: white;
  padding: 10px;
  text-align: center;
}

/* Items in a row */
.d-flex {
  display: flex;
  align-items: center;
  gap: 1rem;
  justify-content: flex-start; 
  flex-wrap: nowrap; 
}

/* Shopping cart button */
.cart-toggle {
  padding: 10px 15px;
  font-size: 1rem; 
}

/* Small user picture */
.profile-picture {
  width: 35px; 
  height: 35px;
  font-size: 0.9rem; 
}

/* User display name */
.user-name {
  margin-left: 10px;
  font-size: 0.9rem; 
}

/* Gray action buttons */
.btn-secondary {
  font-size: 0.9rem;
}

/* Blue circle avatar */
.profile-picture {
  width: 40px;
  height: 40px;
  background-color: #007bff; 
  color: white; 
  border-radius: 50%; 
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1rem;
  font-weight: bold;
}

/* Yellow clickable name */
.user-name {
  color: #ffcc00; 
  text-decoration: none; 
  font-weight: bold; 
  cursor: pointer; 
  margin-left: 10px; 
}

/* Name highlight effect */
.user-name:hover {
  color: #ff9900; 
  text-decoration: underline; 
}

/* Sticky cart corner */
.cart-toggle {
  position: fixed;
  top: 20px;
  right: 20px;
  background-color: #333;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
}



============================================
File: C:\Projects.Study\LaptopMall\src\components\Header.js
============================================
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import AuthModal from './AuthModal';
import './Header.css';

// login & cart
const Header = ({ user, setUser, toggleCartPanel, cart }) => {
  const [logo, setLogo] = useState(null); // State to store the Base64 logo
  const navigate = useNavigate();

  // log in the user if a token exists in localStorage
  useEffect(() => {
    const storedToken = localStorage.getItem('token');
    if (storedToken && !user) {
      try {
        const decodedToken = JSON.parse(atob(storedToken.split('.')[1])); 
        if (decodedToken.exp * 1000 > Date.now()) {
          // Token still valid
          setUser({ name: decodedToken.name, email: decodedToken.email });
        } else {
          // Token expired
          localStorage.removeItem('token');
        }
      } catch (error) {
        // log('Error decoding token:', error);
        localStorage.removeItem('token'); 
      }
    }
  }, [user, setUser]);

  // get the logo from the API
  useEffect(() => {
    fetch('/api/logo')
      .then((res) => res.json())
      .then((data) => {
        setLogo(data.logo); 
      })
      .catch(() => {
        // log('Error fetching logo:', error);
      });
  }, []);

  // Logout
  const handleLogout = () => {
    // clear user data
    setUser(null);
    // Clear token
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('cart');
    // Navigate to home page
    navigate('/');
  };

  return (
    <header className="bg-dark text-white py-3">
      <div className="container d-flex justify-content-between align-items-center">
        {/* Logo */}
        <div className="d-flex align-items-center gap-2">
          {logo && <img src={logo} alt="Laptop Mall Logo" style={{ height: '40px' }} />}
          <h1 className="mb-0">
            <Link to="/" className="text-white text-decoration-none">
              Laptop Mall
            </Link>
          </h1>
        </div>

        {/* Cart and User/Login Section */}
        <div className="d-flex align-items-center gap-3">
          {/* Cart Button */}
          <button onClick={toggleCartPanel} className="btn btn-outline-light">
            🛒 Cart ({cart.length})
          </button>

          {/* User Profile or Login */}
          {user ? (
            <div className="d-flex align-items-center gap-2">
              <div
                className="profile-picture bg-primary text-white rounded-circle d-flex justify-content-center align-items-center"
                style={{ width: '35px', height: '35px' }}
              >
                {user.name ? user.name.charAt(0).toUpperCase() : 'U'}
              </div>
              <Link to="/dashboard" className="text-white text-decoration-none">
                {user.name || 'User'}
              </Link> 
              <button onClick={handleLogout} className="btn btn-secondary">Logout</button>
            </div>
          ) : (
            <AuthModal setUser={setUser} />
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;


============================================
File: C:\Projects.Study\LaptopMall\src\components\Navbar.css
============================================

/* Dark nav bar */
nav {
  background-color: #444;
  padding: 10px;
  /* display: flex;
  justify-content: space-between;
  align-items: center; */
}

/* Menu list layout */
nav ul {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  justify-content: center; 
  gap: 20px; 
}

/* Menu items */
nav ul li {
  display: inline; 
}

/* Menu links style */
nav ul li a {
  color: white;
  text-decoration: none;
  font-size: 1.2rem;
  font-weight: bold; 
  padding: 8px 12px;
  border-radius: 4px;
  transition: color 0.3s ease, background-color 0.3s ease, filter 0.3s ease; 
  filter: grayscale(100%); 
}

/* Link hover effect */
nav ul li a:hover {
  color: #ffcc00; 
  background-color: #555; 
  filter: none; 
}

/* Cart item count */
.cart-badge {
  background-color: red;
  color: white;
  border-radius: 50%; 
  padding: 2px 6px; 
  font-size: 12px; 
  margin-left: 5px; 
}

/* Login form layout */
.auth-form {
  display: flex;
  flex-direction: column;
  gap: 10px; 
}

/* Form input boxes */
.auth-form input {
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* Form buttons */
.auth-form button {
  padding: 5px 10px;
  background-color: #333;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s; 
}

/* Button hover */
.auth-form button:hover {
  background-color: #555; 
}

/* Form text */
.auth-form span {
  color: white; 
  font-weight: bold; 
}

/* Admin dropdown */
.admin-menu {
  position: relative;
}

/* Dropdown content */
.admin-submenu {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  background: white;
  box-shadow: 0 2px 5px rgba(0,0,0,0.2);
  border-radius: 4px;
  padding: 0.5rem 0;
  z-index: 1000;
}

/* Show dropdown */
.admin-menu:hover .admin-submenu {
  display: block;
}

/* Dropdown items */
.admin-submenu li {
  padding: 0.5rem 1rem;
  white-space: nowrap;
}

/* Item hover */
.admin-submenu li:hover {
  background-color: #f5f5f5;
}


============================================
File: C:\Projects.Study\LaptopMall\src\components\Navbar.js
============================================
import React from 'react';
import { Link } from 'react-router-dom';
import './Navbar.css';

// navigashun bar with user menu
const Navbar = ({ user }) => {
// const Navbar = ({ user, setUser }) => {
  return (
    <nav>
      <ul className="navbar-center">
        <li>
          <Link to="/"> 🏠 Home </Link>
        </li>
        <li>
          <Link to="/products"> 💻 Products </Link>
        </li>
        <li>
          <Link to="/services"> ⚡ Services </Link>
        </li>
        <li>
          <Link to="/technews"> 📰 Tech News </Link>
        </li>
        
        {user && <li><Link to="/dashboard">📊 Dashboard</Link></li>}


        {user && user.role === 'admin' && (
          <li className="admin-menu">
            <Link to="/admin">👑 Admin</Link>
          </li>
        )}

        <li>
          <Link to="/contact"> 📞 Contact </Link>
        </li>
        <li>
          <Link to="/about"> ℹ️ About </Link>
        </li>
      </ul>
    </nav>
  );
};

export default Navbar;


============================================
File: C:\Projects.Study\LaptopMall\src\models\TechNewsModel.js
============================================
class TechNewsModel {
  constructor(id, title, summary, date, icon, category) {
    this.id = id;
    this.title = title;
    this.summary = summary;
    this.date = date;
    this.icon = icon;
    this.category = category;
  }
}

export default TechNewsModel;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\About.js
============================================
import React from 'react';

const About = () => {
  return (
    <main className="container my-5" role="main" itemScope itemType="http://schema.org/AboutPage">
      <meta itemProp="description" content="Learn about Laptop Mall - Your trusted destination for quality laptops and expert technical support since 2023." />
      <meta itemProp="keywords" content="laptop store, computer shop, tech support, laptop accessories" />
      
      <header className="bg-transparent shadow-none">
        <h1 className="text-center mb-4 text-dark" itemProp="name">About Us</h1>
      </header>

      <section className="row" aria-label="Company Information">
        <div className="col-md-6 mb-4" itemScope itemType="http://schema.org/Organization">
          <meta itemProp="foundingDate" content="2023" />
          <meta itemProp="name" content="Laptop Mall" />
          <article className="pe-4">
            <h2 className="mb-3">Our Story</h2>
            <p className="mb-4" itemProp="description">
              Founded in 2023, Laptop Mall has become a trusted destination for quality laptops and tech accessories. 
              We pride ourselves on offering expert guidance and superior customer service.
            </p>
            <h3 className="mb-3">Why Choose Us?</h3>
            <ul className="list-unstyled">
              <li className="mb-2">✓ Expert technical support</li>
              <li className="mb-2">✓ Competitive pricing</li>
              <li className="mb-2">✓ Wide range of products</li>
              <li className="mb-2">✓ Fast delivery service</li>
            </ul>
          </article>
        </div>
        
        <div className="col-md-6 mb-4">
          <img
            src="/images/about-us.jpg"
            alt="Our Store Front"
            className="img-fluid rounded"
            itemProp="image"
          />
        </div>
      </section>
    </main>
  );
};

export default About;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\Blog.js
============================================
import React from 'react';

const Blog = () => {
  return (
    <main className="container my-5">
      <h1 className="text-center mb-4">Latest News</h1>
      <section className="row">
        <div className="col-md-4 mb-4">
          <div className="card h-100">
            <img
              src="/images/blog1.jpg"
              alt="New MacBook Air Released"
              className="card-img-top"
            />
            <div className="card-body">
              <h2 className="card-title">New MacBook Air Released</h2>
              <p className="card-text">
                Apple has launched the new MacBook Air with the M2 chip.
              </p>
            </div>
          </div>
        </div>

        <div className="col-md-4 mb-4">
          <div className="card h-100">
            <img
              src="/images/blog2.jpg"
              alt="Best Laptops for Students"
              className="card-img-top"
            />
            <div className="card-body">
              <h2 className="card-title">Best Laptops for Students</h2>
              <p className="card-text">
                Check out our top picks for students on a budget.
              </p>
            </div>
          </div>
        </div>

        <div className="col-md-4 mb-4">
          <div className="card h-100">
            <img
              src="/images/blog3.jpg"
              alt="Gaming Laptops in 2023"
              className="card-img-top"
            />
            <div className="card-body">
              <h2 className="card-title">Gaming Laptops in 2023</h2>
              <p className="card-text">
                Discover the best gaming laptops of the year.
              </p>
            </div>
          </div>
        </div>
      </section>
    </main>
  );
};

export default Blog;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\Cancel.js
============================================
import React from 'react';

const Cancel = () => {
  return (
    <div>
      <h1>Payment Canceled</h1>
      <p>Your payment has been canceled. Please try again.</p>
    </div>
  );
};

export default Cancel;



============================================
File: C:\Projects.Study\LaptopMall\src\pages\Cart.js
============================================
import React, { useContext } from 'react';
import { Link } from 'react-router-dom';
import { CartContext } from '../App';

const Cart = ({ toggleCartPanel }) => {
  const { cart, removeFromCart } = useContext(CartContext);

  //  total price 
  const totalPrice = cart.reduce(
    (total, item) => total + item.price * item.quantity,
    0
  );

  return (
    <main className="container my-5">
      <h1 className="text-center mb-4">Your Cart</h1>
      {cart.length === 0 ? (
        <p>Your cart is empty. <Link to="/products">Go shopping!</Link></p>
      ) : (
        <>
          <section>
            {cart.map((item) => (
              <div key={item.id} className="card mb-3">
                <div className="card-body d-flex justify-content-between align-items-center">
                  <div>
                    <h2 className="card-title">{item.name}</h2>
                    <p className="card-text"><strong>Price:</strong> ${item.price}</p>
                    <p className="card-text"><strong>Quantity:</strong> {item.quantity}</p>
                  </div>
                  <div>
                    <button
                      className="btn btn-danger"
                      onClick={() => removeFromCart(item.id)}
                    >
                      Remove
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </section>
          <div className="d-flex justify-content-between align-items-center">
            <h3>Total: ${totalPrice.toFixed(2)}</h3>
            <Link
              to="/checkout"
              className="btn btn-primary"
              onClick={toggleCartPanel} 
            >
              Proceed to Checkout
            </Link>
          </div>
        </>
      )}
    </main>
  );
};

export default Cart;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\Checkout.js
============================================

import React, { useContext, useState, useEffect } from 'react';
import { CartContext } from '../App';
import { loadStripe } from '@stripe/stripe-js';

const stripePromise = loadStripe('pk_test_hc2EkRSerTEECYnSaqvVDQdh'); 

const Checkout = () => {
  const { cart } = useContext(CartContext);
  const [address, setAddress] = useState(null); 
  const [coordinates, setCoordinates] = useState(null); 

  // total price 
  const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);

  //  GPS coordinates and address 
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;

          setCoordinates({ latitude, longitude });

          try {
            const apiKey = '1aa8180ceaef4d26be004c84ac310d51'; 
            const url = `https://api.opencagedata.com/geocode/v1/json?key=${apiKey}&q=${latitude}+${longitude}&pretty=1&no_annotations=1`;
            const response = await fetch(url);
            if (!response.ok) throw new Error('Failed to fetch address');
            const data = await response.json();
            setAddress(data.results[0]?.formatted || 'Address not found');
          } catch (_error) {
            // log('Geocoding error:', error);
            setAddress('Address not found');
          }
        },
        () => {
          alert('Unable to retrieve your location. Please try again.');
        }
      );
    } else {
      alert('Geolocation is not supported by your browser.');
    }
  }, []);

  // Stripe Checkout
  const handleCheckout = async () => {
    if (!coordinates) {
      alert('Unable to retrieve your location. Please try again.');
      return;
    }

    const { latitude, longitude } = coordinates;

    //  user ID from JWT token 
    const token = localStorage.getItem('token');
    let userId;
    if (token) {
      const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode the token payload
      userId = decodedToken.userId; // Extract userId
    }

    if (!userId) {
      alert('User not logged in. Please log in to proceed.');
      return;
    }
    // Remove log('User ID:', userId);
    
    try {
      // Create sales order
      await fetch('http://localhost:5000/api/create-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId,
          cart,
          totalAmount: totalPrice,
          latitude,
          longitude,
        }),
      });

      // Stripe Checkout
      const stripe = await stripePromise;

      // Create a checkout Session
      const response = await fetch('http://localhost:5000/create-checkout-session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          cart,
          userId,
          latitude,
          longitude,
        }),
      });

      const session = await response.json();

      localStorage.removeItem('cart');

      // Redirect to Stripe Checkout page
      const { error } = await stripe.redirectToCheckout({ sessionId: session.id });

      if (error) {
        alert('An error occurred while processing your order. Please try again.');
      }
    } catch (error) {
      // log('Error during checkout:', error);
      alert('An error occurred while processing your order. Please try again.');
    }
  };

  return (
    <main className="container my-5">
      <h1 className="text-center mb-4">Checkout</h1>
      {cart.length === 0 ? (
        <p>Your cart is empty. Please add items before checking out.</p>
      ) : (
        <>

          <section>
            {cart.map((item) => (
              <div key={item.id} className="card mb-3">
                <div className="card-body">
                  <h2 className="card-title">{item.name}</h2>
                  <p className="card-text"><strong>Price:</strong> ${item.price}</p>
                  <p className="card-text"><strong>Quantity:</strong> {item.quantity}</p>
                </div>
              </div>
            ))}
          </section>

          <div className="d-flex justify-content-between align-items-center">
            <h3>Total: £{totalPrice.toFixed(2)}</h3>
            <button className="btn btn-success" onClick={handleCheckout}>
              Pay Now
            </button>
          </div>

          {/* Display Address */}
          {coordinates && (
            <div className="mb-3 m-5">
              <h4>Delivery Address (Auto Detected)</h4>
              <p><strong>Latitude:</strong> {coordinates.latitude}</p>
              <p><strong>Longitude:</strong> {coordinates.longitude}</p>
              <p><strong>Formatted Address:</strong> {address || 'Fetching address...'}</p>
            </div>
          )}

        </>
      )}
    </main>
  );
};

export default Checkout;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\Contact.js
============================================
import React from 'react';

// contact form 
const Contact = () => {
  // handle form is sent
  const handleSubmit = async (e) => {
    // dont refresh the hole page
    e.preventDefault();
    const subject = encodeURIComponent("Contact from Laptop Mall");
    const body = encodeURIComponent(`Name: ${e.target.name.value}\nMessage: ${e.target.message.value}`);
    window.location.href = `mailto:info@laptopmall.com?subject=${subject}&body=${body}`;
  };

  return (
    <main className="container my-5" role="main" itemScope itemType="http://schema.org/ContactPage">
      <meta itemProp="description" content="Contact Laptop Mall for sales inquiries, technical support, and customer service." />
      <meta itemProp="keywords" content="contact us, customer support, tech help, laptop sales" />
      <meta itemProp="email" content="support@laptopmall.com" />
      <meta itemProp="telephone" content="+1-234-567-8900" />
      <header className="bg-transparent shadow-none">
        <h1 className="text-center mb-4 text-dark" itemProp="name">Contact Us</h1>
      </header>

      <section className="row" aria-label="Contact Information">
        <div className="col-md-6 mb-4" itemScope itemType="http://schema.org/Organization">
          <h2 className="mb-3">Get in Touch</h2>
          <p>Have questions? Reach out to us! We are here to help you find the perfect laptop.</p>
          <address>
            <ul className="list-unstyled" itemProp="address">
              <li className="mb-2">
                <strong>Email: </strong>
                <a href="mailto:info@laptopmall.com" itemProp="email">info@laptopmall.com</a>
              </li>
              <li className="mb-2">
                <strong>Phone: </strong>
                <a href="tel:+1234567890" itemProp="telephone">+123 456 7890</a>
              </li>
              <li className="mb-2" itemProp="address">
                <strong>Address: </strong>123 Laptop Street, Tech City
              </li>
            </ul>
          </address>
          
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label htmlFor="name" className="form-label">Name</label>
              <input type="text" className="form-control" id="name" required />
            </div>
            <div className="mb-3">
              <label htmlFor="message" className="form-label">Message</label>
              <textarea className="form-control" id="message" rows="4" required></textarea>
            </div>
            <button type="submit" className="btn btn-primary">Send Email</button>
          </form>
        </div>
        
        <div className="col-md-6 mb-4">
          <img
            src="/images/contact-us.jpg"
            alt="Contact Us"
            className="img-fluid rounded"
            itemProp="image"
          />
        </div>
      </section>
    </main>
  );
};

export default Contact;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\Home.js
============================================
import React from 'react';

// home page with featured laptops
const Home = () => {
  return (
    <main className="container my-5" role="main" itemScope itemType="http://schema.org/WebPage">
      <meta itemProp="description" content="Discover premium laptops at Laptop Mall. Wide selection of brands, competitive prices, and expert support." />
      <meta itemProp="keywords" content="laptops, gaming laptops, business laptops, MacBook, Dell XPS, HP Spectre" />
      <header className="bg-transparent shadow-none">
        {/* <h1 itemProp="headline">Welcome to Laptop Mall</h1> */}
        <section className="text-center">
          {/* <p className="lead" itemProp="description">Your one-stop shop for the latest and greatest laptops.</p> */}
          <img
            src="/images/home-banner.jpg"
            alt="Laptop Banner"
            className="img-fluid rounded"
            itemProp="image"
          />
        </section>
      </header>

      <section className="mt-5" aria-label="Featured Laptops">
        <h2 className="text-center mb-4">Featured Laptops</h2>
        <div className="row">
          <article className="col-md-4 mb-4" itemScope itemType="http://schema.org/Product">
            <div className="card h-100 border-0">
              <img
                src="https://m.media-amazon.com/images/I/51HfgJrUwpL._AC_SL1000_.jpg"
                alt="MacBook Air M1"
                className="card-img-top"
                itemProp="image"
              />
              <div className="card-body">
                <h3 className="card-title" itemProp="name">MacBook Air M1</h3>
                <p className="card-text">
                  <strong>Price:</strong> <span itemProp="price">$999</span>
                </p>
                <p className="card-text" itemProp="description">
                  <strong>Specifications:</strong> 8GB RAM, 256GB SSD, Apple M1 Chip
                </p>
              </div>
            </div>
          </article>

          <div className="col-md-4 mb-4">
            <div className="card h-100 border-0">
              <img
                src="https://m.media-amazon.com/images/I/71ZQ2AIvBFL._AC_SL1500_.jpg"
                alt="Dell XPS 13"
                className="card-img-top"
              />
              <div className="card-body">
                <h3 className="card-title">Dell XPS 13</h3>
                <p className="card-text">
                  <strong>Price:</strong> $1299
                </p>
                <p className="card-text">
                  <strong>Specifications:</strong> 16GB RAM, 512GB SSD, Intel Core i7
                </p>
              </div>
            </div>
          </div>

          <div className="col-md-4 mb-4">
            <div className="card h-100 border-0">
              <img
                src="https://m.media-amazon.com/images/I/71-ZWCf548L._AC_SL1500_.jpg"
                alt="HP Spectre x360"
                className="card-img-top"
              />
              <div className="card-body">
                <h3 className="card-title">HP Spectre x360</h3>
                <p className="card-text">
                  <strong>Price:</strong> $1199
                </p>
                <p className="card-text">
                  <strong>Specifications:</strong> 16GB RAM, 1TB SSD, Intel Core i7
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>
  );
};

export default Home;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\Product.js
============================================
import React, { useEffect, useState, useContext } from 'react';
import { CartContext } from '../App'; 
//  the top laptops
const Products = () => {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const { addToCart } = useContext(CartContext); 
  const [filters, setFilters] = useState({
    brand: '',
    minPrice: '',
    maxPrice: ''
  });

  useEffect(() => {
    fetch('/api/products')
      .then((response) => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then((data) => {
        setProducts(data);
        setFilteredProducts(data);
      })
      .catch(() => {});
  }, []);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    const newFilters = {
      ...filters,
      [name]: value
    };
    setFilters(newFilters);

    // apply all filters 
    let filtered = [...products];
    if (newFilters.brand) {
      filtered = filtered.filter(product => 
        product.brand.toLowerCase().includes(newFilters.brand.toLowerCase())
      );
    }
    if (newFilters.minPrice) {
      filtered = filtered.filter(product => 
        product.price >= Number(newFilters.minPrice)
      );
    }
    if (newFilters.maxPrice) {
      filtered = filtered.filter(product => 
        product.price <= Number(newFilters.maxPrice)
      );
    }
    setFilteredProducts(filtered);
  };

  //  reset function
  const handleReset = () => {
    setFilters({ brand: '', minPrice: '', maxPrice: '' });
    setFilteredProducts([...products]); 
  };

  return (
    <main className="container my-5">
      <h1 className="text-center mb-4">Our Products</h1>
      
      <div className="row mb-4">
        <div className="col-md-3">
          <input
            type="text"
            className="form-control"
            placeholder="Filter by brand"
            name="brand"
            value={filters.brand}
            onChange={handleFilterChange}
          />
        </div>
        <div className="col-md-3">
          <input
            type="number"
            className="form-control"
            placeholder="Min price"
            name="minPrice"
            value={filters.minPrice}
            onChange={handleFilterChange}
          />
        </div>
        <div className="col-md-3">
          <input
            type="number"
            className="form-control"
            placeholder="Max price"
            name="maxPrice"
            value={filters.maxPrice}
            onChange={handleFilterChange}
          />
        </div>
        <div className="col-md-3">
          <button 
            className="btn btn-outline-dark w-100"
            onClick={handleReset}
          >
            Reset
          </button>
        </div>
      </div>
      <section className="row">
        {filteredProducts.map((product) => (
          <div key={product.id} className="col-md-4 mb-4">
            <div className="card h-100 border-0">
              <img 
                src={product.image} 
                alt={product.name} 
                className="card-img-top object-fit-contain" 
                style={{ height: '250px' }}
              />
              <div className="card-body">
                <h2 className="card-title">{product.name}</h2>
                <p className="card-text"><strong>Brand:</strong> {product.brand}</p>
                <p className="card-text"><strong>Price:</strong> ${product.price}</p>
                <p className="card-text">
                  <strong>Specifications:</strong> {product.specifications}
                </p>
                <p className="card-text"><strong>Rating:</strong> {product.rating} / 5</p>
                <button
                  className="btn btn-dark w-100 btn-lg hover-btn"
                  onClick={() => addToCart(product)} 
                >
                  Add to Cart
                </button>
              </div>
            </div>
          </div>
        ))}
      </section>
    </main>
  );
};

export default Products;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\Services.js
============================================
import React from 'react';

const Services = () => {
  return (
    <main className="container my-5" role="main" itemScope itemType="http://schema.org/Service">
      <meta itemProp="description" content="Professional laptop services including repairs, upgrades, maintenance, and technical support." />
      <meta itemProp="keywords" content="laptop repair, computer maintenance, tech support, hardware upgrade" />
      <meta itemProp="provider" content="Laptop Mall" />
      <header className="bg-transparent shadow-none">
        <meta itemProp="description" content="Explore our services for laptop sales, repairs, and accessories" />
        <h1 className="text-center mb-4 text-dark" itemProp="name">Our Services</h1>
      </header>
      
      <section className="row" aria-label="Services Overview">
        <article className="col-md-4 mb-4" itemScope itemType="http://schema.org/Service">
          <div className="card h-100" role="article">
            <img
              src="/images/service-sales.jpg"
              alt="Laptop Sales - Display of modern laptops"
              className="card-img-top"
              itemProp="image"
            />
            <div className="card-body">
              <h2 className="card-title" itemProp="name">Laptop Sales</h2>
              <p className="card-text" itemProp="description" aria-label="Laptop sales service description">
                Explore our wide range of laptops from top brands like Apple, Dell,
                HP, and more. We offer the latest models at competitive prices.
              </p>
            </div>
          </div>
        </article>

        <article className="col-md-4 mb-4">
          <div className="card h-100" role="article">
            <img
              src="/images/service-repair.jpg"
              alt="Laptop Repair - Technician working on laptop"
              className="card-img-top"
            />
            <div className="card-body">
              <h2 className="card-title">Repair Services</h2>
              <p className="card-text" itemProp="description">
                Get your laptop repaired by our expert technicians. We handle
                everything from screen replacements to hardware upgrades.
              </p>
            </div>
          </div>
        </article>

        <article className="col-md-4 mb-4">
          <div className="card h-100" role="article">
            <img
              src="/images/service-accessories.jpg"
              alt="Laptop Accessories - Various computer peripherals"
              className="card-img-top"
            />
            <div className="card-body">
              <h2 className="card-title">Accessories</h2>
              <p className="card-text" itemProp="description">
                Find the perfect accessories for your laptop, including bags,
                chargers, mice, and more.
              </p>
            </div>
          </div>
        </article>
      </section>
    </main>
  );
};

export default Services;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\Success.js
============================================
import React, { useState, useEffect } from 'react';

// shows after buying somthing
const Success = () => {
  const [orderDetails, setOrderDetails] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    if (cart.length > 0) {
      localStorage.removeItem('cart');
      window.location.reload();
    }
  }, []);

  useEffect(() => {
    const queryParams = new URLSearchParams(window.location.search);
    const sessionId = queryParams.get('session_id'); 

    // log('Session ID from URL:', sessionId); 

    if (sessionId) {
      fetch(`http://localhost:5000/verify-payment-session?session_id=${sessionId}`)
        .then((res) => {
          // log('Backend response:', res); 
          return res.json();
        })
        .then((data) => {
          // log('Payment verification data:', data); 

          if (data.status === 'success') {
            const parsedCart = data.cart.map(item => ({
              ...item,
              price: parseFloat(item.price),
            }));

            //  payment was successful
            setOrderDetails({
              ...data,
              cart: parsedCart,
            });
          } else {
            // failed payment
            setOrderDetails({ error: 'Payment Failed' });
          }
          setLoading(false);
        })
        .catch(() => {
          // log('Error verifying payment:', error);
          setOrderDetails({ error: 'Payment Failed' }); 
          setLoading(false); 
        });
    } else {
      // log('No session_id in URL');
      setOrderDetails({ error: 'No session_id in URL' }); 
      setLoading(false); 
    }
  }, []);

  if (loading) {
    return (
      <div className="container my-5 text-center">
        <h1>Loading...</h1>
      </div>
    );
  }

  // error state
  if (orderDetails?.error) {
    return (
      <div className="container my-5 text-center">
        <h1>{orderDetails.error}</h1>
      </div>
    );
  }

  // success state with order details
  return (
    <div className="container my-5 text-center">
      {/* Payment Success Title */}
      <h1 className="text-success">Payment Successful</h1>

      {/* Success Image */}
      <img
        src="/images/payment-success.gif"
        alt="Payment Success"
        className="img-fluid d-block mx-auto mb-4"
        style={{ width: '150px', height: '150px' }}
      />

      {/* Order Details Section */}
      <div className="card shadow p-4 mx-auto" style={{ maxWidth: '600px' }}>
        <h3 className="mb-3">Order Details</h3>
        <p><strong>Order ID:</strong> {orderDetails.orderId.slice(-20)}</p>
        <p><strong>Total Amount:</strong> £{parseFloat(orderDetails.totalAmount).toFixed(2)}</p>
        <h4 className="mt-3">Items Purchased:</h4>
        <ul className="list-group list-group-flush">
          {orderDetails.cart.map((item, index) => (
            <li key={index} className="list-group-item">
              {item.name} - £{item.price.toFixed(2)} x {item.quantity}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default Success;


============================================
File: C:\Projects.Study\LaptopMall\src\pages\TechNews.js
============================================
import React, { useState, useEffect } from 'react';
import TechNewsService from '../services/TechNewsService';

// tech news and updates
const TechNews = () => {
  const [news, setNews] = useState([]);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [question, setQuestion] = useState('');
  const [answer, setAnswer] = useState('');
  const [qaData, setQaData] = useState([]);

  useEffect(() => {
    fetchNews();
    fetchQaData();
  }, []);

  const fetchQaData = async () => {
    try {
      const res = await fetch('/data/tech-qa.json');
      const data = await res.json();
      setQaData(data.qa);
    } catch (err) {
      // log('Error loading QA data:', err);
    }
  };

  const fetchNews = async () => {
    try {
      const newsData = await TechNewsService.getNews();
      setNews(newsData);
      setLastUpdated(new Date().toLocaleString());
    } catch (err) {
      // log('Error fetching news:', err);
      setNews([]);
    }
  };

  const handleQuestion = () => {
    const qa = qaData.find(item => 
      item.question.toLowerCase().includes(question.toLowerCase())
    );
    setAnswer(qa ? qa.answer : "Sorry, I don't have an answer for that question.");
    setQuestion('');
  };

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>Tech News</h2>
        <small>Last updated: {lastUpdated}</small>
      </div>
      
      <div className="list-group">
        {Array.isArray(news) && news.map(item => (
          <div key={item.id} className="list-group-item">
            <div className="d-flex align-items-center">
              <div className="me-3">
                <i className={`fas ${item.icon} fa-2x text-primary`}></i>
              </div>
              <div>
                <h5>{item.title}</h5>
                <p className="mb-1">{item.summary}</p>
                <small className="text-muted">
                  {new Date(item.date).toLocaleDateString()}
                </small>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {/* Chat widget remains unchanged */}
      <div className={`chat-widget ${isChatOpen ? 'open' : ''}`} style={{
        position: 'fixed',
        bottom: '20px',
        right: '20px',
        zIndex: 1000
      }}>
        <button 
          className="btn btn-dark rounded-circle p-3"
          onClick={() => setIsChatOpen(!isChatOpen)}
          style={{ width: '60px', height: '60px' }}
        >
          {isChatOpen ? '✕' : '💬'}
        </button>
        
        {isChatOpen && (
          <div className="card" style={{ 
            position: 'absolute', 
            bottom: '70px', 
            right: '0',
            width: '300px'
          }}>
            <div className="card-header bg-dark text-white">
              Tech Assistant
            </div>
            <div className="card-body">
              <div className="mb-3" style={{ minHeight: '100px' }}>
                {answer && <p>{answer}</p>}
              </div>
              <div className="input-group">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Ask about SSD, RAM..."
                  value={question}
                  onChange={(e) => setQuestion(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleQuestion()}
                />
                <button 
                  className="btn btn-dark"
                  onClick={handleQuestion}
                >
                  Ask
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TechNews;



============================================
File: C:\Projects.Study\LaptopMall\src\private\Dashboard.js
============================================
import React, { useState, useEffect } from 'react';

const Dashboard = ({ user }) => {
  const [address, setAddress] = useState(null);
  const [coordinates, setCoordinates] = useState(null);

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          setCoordinates({ latitude, longitude });

          try {
            const apiKey = '1aa8180ceaef4d26be004c84ac310d51';
            const url = `https://api.opencagedata.com/geocode/v1/json?key=${apiKey}&q=${latitude}+${longitude}&pretty=1&no_annotations=1`;
            const response = await fetch(url);
            const data = await response.json();
            setAddress(data.results[0]?.formatted || 'Address not found');
          } catch (error) {
            setAddress('Address not found');
          }
        },
        () => {
        }
      );
    }
  }, []);

  if (!user) {
    return (
      <main className="container my-5">
        <h1 className="text-center mb-4">Dashboard</h1>
        <section className="card p-4">
          <p>Please log in to view your profile information.</p>
        </section>
      </main>
    );
  }

  return (
    <main className="container my-5">
      <h1 className="text-center mb-4">Dashboard</h1>
      <section className="card p-4">
        <h2>Profile Information</h2>
        <p><strong>Name:</strong> {user.name}</p>
        <p><strong>Email:</strong> {user.email}</p>
        
        <div className="mt-4 d-flex align-items-start">
          <div className="flex-grow-1">
            <h3>Your Location</h3>
            {coordinates ? (
              <>
                <p><strong>Latitude:</strong> {coordinates.latitude}</p>
                <p><strong>Longitude:</strong> {coordinates.longitude}</p>
                <p><strong>Address:</strong> {address || 'Fetching address...'}</p>
              </>
            ) : (
              <p>Retrieving location...</p>
            )}
          </div>
          <img
            src="/images/location.gif"
            alt="Location"
            className="ms-4"
            style={{ width: '150px', height: '150px' }}
          />
        </div>

        {coordinates && (
          <div className="mt-4">
            <iframe
              title="Dashboard Analytics"
              src={`https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2000!2d${coordinates.longitude}!3d${coordinates.latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zM!5e0!3m2!1sen!2s!4v1633003487324!5m2!1sen!2s`}
              width="100%"
              height="450"
              style={{ border: 0 }}
              allowFullScreen=""
              loading="lazy"
              referrerPolicy="no-referrer-when-downgrade"
            ></iframe>
          </div>
        )}
      </section>
    </main>
  );
};

export default Dashboard;


============================================
File: C:\Projects.Study\LaptopMall\src\services\aiHelper.js
============================================

export const getLaptopDetails = async (productName) => {
  const prompt = `Please provide details about the laptop (${productName}) in the following plaintextformat exactly without explanations or any additional text using | and = separators:|brand=brand name|price=plain integer numeric price in GBP|specifications=detailed specs in numbers and letters only limited by 45 characters|rating=number between 1-5|image=direct image URL from Amazon|`;


  try {
    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-goog-api-key': 'AIzaSyAPghmOwXS38pAE5Xyakz3V_CjJPNFw-nA'
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      })
    });

    const data = await response.json();
    
    if (!data.candidates || !data.candidates[0]?.content?.parts?.[0]?.text) {
      throw new Error('Invalid AI response format');
    }

    const responseText = data.candidates[0].content.parts[0].text;
    const pairs = responseText.split('|').filter(Boolean);
    const aiResponse = {};
    
    pairs.forEach(pair => {
      const [key, value] = pair.split('=');
      if (key && value) {
        aiResponse[key.trim()] = value.trim();
      }
    });
    
    return {
      brand: aiResponse.brand,
      price: parseFloat(aiResponse.price),
      specifications: aiResponse.specifications,
      rating: parseFloat(aiResponse.rating),
      image: aiResponse.image
    };
  } catch {
    alert('Failed to get product details from AI. Please try again or fill in manually.');
    return null;
  }
};


============================================
File: C:\Projects.Study\LaptopMall\src\services\TechNewsService.js
============================================
import TechNewsModel from '../models/TechNewsModel';

// gets tech news from backend
class TechNewsService {
  // get all the newz
  static async getNews() {
    try {
      const response = await fetch('/api/technews');
      const data = await response.json();
      return data.map(item => new TechNewsModel(
        item.id,
        item.title,
        item.summary,
        item.date,
        item.icon,
        item.category
      ));
    } catch {
      return [];
    }
  }
}

export default TechNewsService;


============================================
File: C:\Projects.Study\LaptopMall\src\styles\Product.css
============================================
/* Card animation */
.card {
  transition: transform 0.2s;
  margin-bottom: 20px;
}

/* Hover zoom */
.card:hover {
  transform: scale(1.05);
}

/* Product image */
.card-img-top {
  height: 200px;
  object-fit: cover;
}

/* Product name */
.card-title {
  font-size: 1.2rem;
  font-weight: bold;
}

/* Product details */
.card-text {
  font-size: 0.9rem;
  color: #333;
}

/* Green cart button */
.btn-add-to-cart {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

/* Button highlight */
.btn-add-to-cart:hover {
  background-color: #218838;
}


============================================
File: C:\Projects.Study\LaptopMall\src\styles\utils.css
============================================
/* Grid Layout System */
.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1rem;
  padding: 1rem;
}

/* Flexbox Layout System */
.flex-container {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  justify-content: space-between;
  align-items: center;
}

/* Responsive Media Queries */
@media screen and (max-width: 768px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}

/* CSS Variables */
:root {
  --primary-color: #444;
  --secondary-color: #555;
  --accent-color: #ffcc00;
  --text-light: #ffffff;
  --text-dark: #333333;
}


============================================
File: C:\Projects.Study\LaptopMall\src\utils\logger.js
============================================
/* eslint-disable no-console */
/* eslint-env node */
export const log = (...args) => {
  console.log(...args);
};

export const error = (...args) => {
  console.error(...args);
};


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\API.test.http
============================================



### Get System Status
GET http://localhost:5000/api/system/status



###
GET http://localhost:5000/api/products


### Get Tech News Test
GET http://localhost:5000/api/technews

### Get Logo
GET http://localhost:5000/api/logo






### Login to get token
POST http://localhost:5000/api/login
Content-Type: application/json

{
    "email": "admin1@example.com",
    "password": "password"
}

### Token from Login
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsIm5hbWUiOiJhZG1pbjEiLCJlbWFpbCI6ImFkbWluMUBleGFtcGxlLmNvbSIsImlhdCI6MTc0NDY0Mjg2MiwiZXhwIjoxNzQ0NjQ2NDYyfQ.SgX6nT5IbnSKDRV7fjborsKLsreP4450RtYGLkbdjXE

### Get Admin Users (Using Token)
GET http://localhost:5000/api/admin/usermanagement
Authorization: Bearer {{token}}

### Get Sales Report (Using Token)
GET http://localhost:5000/api/admin/salesreport
Authorization: Bearer {{token}}







### POST to Gemini API Test
POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent
Content-Type: application/json
x-goog-api-key: AIzaSyAPghmOwXS38pAE5Xyakz3V_CjJPNFw-nA

{
  "contents": [{"parts": [{"text": "Please provide details about the laptop (MacBook Pro 16) in the following plaintext format exactly without explanations or any additional text using | and = separators:|brand=brand name|price=plain integer numeric price in GBP|specifications=detailed specs in numbers and letters only limited by 45 characters|rating=number between 1-5|image=direct image URL from Amazon|"}]}]
}





============================================
File: C:\Projects.Study\LaptopMall\src\_test_\Auth.test.js
============================================
/* eslint-env jest */

const userCredentials = {
  email: 'test@example.com',
  password: 'Password123!',
  role: 'user'
};

describe('User Authentication', () => {
  test('user credentials format', () => {
    expect(userCredentials.email).toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
    expect(userCredentials.password.length).toBeGreaterThanOrEqual(8);
    expect(['admin', 'user']).toContain(userCredentials.role);
  });
});


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\Cart.test.js
============================================
/* eslint-env jest */

const cartItem = {
  productId: 1,
  quantity: 2,
  price: 1299.99,
  name: "Test Product"
};

describe('Shopping Cart', () => {
  test('cart item structure', () => {
    expect(cartItem.productId).toBeGreaterThan(0);
    expect(cartItem.quantity).toBeGreaterThan(0);
    expect(cartItem.price).toBeGreaterThan(0);
    expect(cartItem.name.length).toBeGreaterThan(0);
  });
});


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\Dal.test.js
============================================
/* eslint-env jest */

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'laptopmall'
};

describe('Database Configuration', () => {
  test('database config has required properties', () => {
    expect(dbConfig).toHaveProperty('host');
    expect(dbConfig).toHaveProperty('user');
    expect(dbConfig).toHaveProperty('password');
    expect(dbConfig).toHaveProperty('database');
  });

  test('database connection values are valid', () => {
    expect(typeof dbConfig.host).toBe('string');
    expect(dbConfig.host.length).toBeGreaterThan(0);
    expect(typeof dbConfig.user).toBe('string');
    expect(dbConfig.user.length).toBeGreaterThan(0);
    expect(typeof dbConfig.password).toBe('string');
    expect(typeof dbConfig.database).toBe('string');
    expect(dbConfig.database).toBe('laptopmall');
  });

  test('database host is localhost', () => {
    expect(dbConfig.host).toBe('localhost');
  });
});

describe('Database Queries', () => {
  test('sales order query structure', () => {
    const expectedQuery = 'INSERT INTO sales_orders (user_id, total_amount, order_details, latitude, longitude) VALUES (?, ?, ?, ?, ?)';
    expect(expectedQuery).toContain('INSERT INTO sales_orders');
    expect(expectedQuery).toContain('user_id');
    expect(expectedQuery).toContain('total_amount');
    expect(expectedQuery).toContain('order_details');
    expect(expectedQuery).toContain('latitude');
    expect(expectedQuery).toContain('longitude');
  });
});


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\Payment.test.js
============================================
/* eslint-env jest */

const paymentDetails = {
  amount: 1299.99,
  currency: 'gbp',
  paymentMethod: 'card'
};

describe('Payment Processing', () => {
  test('payment details validation', () => {
    expect(paymentDetails.amount).toBeGreaterThan(0);
    expect(paymentDetails.currency).toBe('gbp');
    expect(['card']).toContain(paymentDetails.paymentMethod);
  });
});


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\ProductApi.test.js
============================================
/* eslint-env jest */

describe('Product API', () => {

  test('fetch products from API', async () => {
    const response = await fetch('http://localhost:5000/api/products');
    const data = await response.json();
    
    expect(response.status).toBe(200);
    expect(Array.isArray(data)).toBe(true);
    expect(data.length).toBeGreaterThan(0);
  });

  test('fetch products from API', async () => {
    const response = await fetch('http://localhost:5000/api/products');
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(Array.isArray(data)).toBe(true);
    expect(data.length).toBeGreaterThan(0);
  });

});


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\ProductData.test.js
============================================
/* eslint-env jest */

const productItem = {
  id: 1,
  name: "MacBook Pro",
  brand: "Apple",
  price: 1299,
  image: "macbook.jpg",
  specifications: "M2 chip, 16GB RAM, 512GB SSD",
  rating: 4.5
};

describe('Product Data Structure', () => {
  test('product has required properties', () => {
    expect(productItem).toHaveProperty('id');
    expect(productItem).toHaveProperty('name');
    expect(productItem).toHaveProperty('brand');
    expect(productItem).toHaveProperty('price');
    expect(productItem).toHaveProperty('image');
    expect(productItem).toHaveProperty('specifications');
    expect(productItem).toHaveProperty('rating');
  });

  test('product has correct data types', () => {
    expect(typeof productItem.id).toBe('number');
    expect(typeof productItem.name).toBe('string');
    expect(typeof productItem.brand).toBe('string');
    expect(typeof productItem.price).toBe('number');
    expect(typeof productItem.image).toBe('string');
    expect(typeof productItem.specifications).toBe('string');
    expect(typeof productItem.rating).toBe('number');
  });

  test('product values are valid', () => {
    expect(productItem.id).toBeGreaterThan(0);
    expect(productItem.name.length).toBeGreaterThan(0);
    expect(productItem.brand.length).toBeGreaterThan(0);
    expect(productItem.price).toBeGreaterThan(0);
    expect(productItem.specifications.length).toBeGreaterThan(0);
    expect(productItem.rating).toBeGreaterThanOrEqual(0);
    expect(productItem.rating).toBeLessThanOrEqual(5);
  });
});


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\TechNewsApi.test.js
============================================
/* eslint-env jest */

describe('Tech News API', () => {
  test('fetch tech news from API', async () => {
    const response = await fetch('http://localhost:5000/api/technews');
    const data = await response.json();
    
    expect(response.status).toBe(200);
    expect(Array.isArray(data)).toBe(true);
    expect(data.length).toBeGreaterThan(0);
    expect(data[0]).toHaveProperty('title');
    expect(data[0]).toHaveProperty('summary');
    expect(data[0]).toHaveProperty('date');
  });
});


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\TechNewsData.test.js
============================================
/* eslint-env jest */

const techNewsItem = {
  id: 1,
  title: "Test News",
  summary: "Test Summary",
  date: "2024-03-19",
  icon: "fa-laptop",
  category: "test"
};

describe('Tech News Data Structure', () => {
  test('news item has required properties', () => {
    expect(techNewsItem).toHaveProperty('id');
    expect(techNewsItem).toHaveProperty('title');
    expect(techNewsItem).toHaveProperty('summary');
    expect(techNewsItem).toHaveProperty('date');
    expect(techNewsItem).toHaveProperty('icon');
    expect(techNewsItem).toHaveProperty('category');
  });

  test('news item has correct data types', () => {
    expect(typeof techNewsItem.id).toBe('number');
    expect(typeof techNewsItem.title).toBe('string');
    expect(typeof techNewsItem.summary).toBe('string');
    expect(typeof techNewsItem.date).toBe('string');
    expect(typeof techNewsItem.icon).toBe('string');
    expect(typeof techNewsItem.category).toBe('string');
  });

  test('news item values are valid', () => {
    // Check if values are not empty
    expect(techNewsItem.title.length).toBeGreaterThan(0);
    expect(techNewsItem.summary.length).toBeGreaterThan(0);
    expect(techNewsItem.icon.length).toBeGreaterThan(0);
    expect(techNewsItem.category.length).toBeGreaterThan(0);
    
    // Check date format (YYYY-MM-DD)
    expect(techNewsItem.date).toMatch(/^\d{4}-\d{2}-\d{2}$/);
    
    // Check if ID is positive
    expect(techNewsItem.id).toBeGreaterThan(0);
  });
});


============================================
File: C:\Projects.Study\LaptopMall\src\_test_\UserApi.test.js
============================================
/* eslint-env jest */
import { log } from '../utils/logger';

describe('User API', () => {
  test('fetch user profile', async () => {
    const response = await fetch('http://localhost:5000/api/user/profile');
    expect([200, 401, 404]).toContain(response.status);
    
    if (response.status === 200) {
      const data = await response.json();
      expect(data).toHaveProperty('id');
      expect(data).toHaveProperty('email');
      expect(data).toHaveProperty('role');
    }
  });

  test('fetch user orders', async () => {
    try {
      const response = await fetch('http://localhost:5000/api/user/orders');
      expect([200, 401, 404]).toContain(response.status);
    } catch (error) {
      log('User orders API not available:', error.message);
    }
  });
});

